<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'[
<!ENTITY RFC2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2460 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2460.xml">
<!ENTITY RFC4021 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4021.xml">
<!ENTITY RFC4492 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4492.xml">
<!ENTITY RFC4944 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4944.xml">
<!ENTITY RFC5246 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC5272 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5272.xml">
<!ENTITY RFC5751 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5751.xml">
<!ENTITY RFC5958 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5958.xml">
<!ENTITY RFC5967 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5967.xml">
<!ENTITY RFC6090 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6090.xml">
<!ENTITY RFC6347 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6347.xml">
<!-- <!ENTITY RFC6838 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6838.xml"> -->
<!ENTITY RFC6690 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6690.xml">
<!ENTITY RFC7030 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7030.xml">
<!ENTITY RFC7230 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7230.xml">
<!ENTITY RFC7251 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7251.xml">
<!ENTITY RFC7252 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7252.xml">
<!ENTITY RFC7925 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7925.xml">
<!ENTITY RFC7959 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7959.xml">
<!ENTITY RFC7641 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7641.xml">
<!ENTITY RFC4919 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4919.xml">
<!ENTITY I-D.ietf-anima-bootstrapping-keyinfra SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-anima-bootstrapping-keyinfra.xml">
<!ENTITY I-D.ietf-6tisch-dtsecurity-secure-join SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-6tisch-dtsecurity-secure-join.xml">
<!ENTITY I-D.ietf-6tisch-minimal-security SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-6tisch-minimal-security.xml">
<!ENTITY I-D.selander-ace-cose-ecdhe SYSTEM
"http://xml.resource.org/public/rfc/bibxml3/reference.I-D.selander-ace-cose-ecdhe.xml">
<!ENTITY I-D.ietf-core-object-security SYSTEM
"http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-core-object-security.xml">
<!--
<!ENTITY I-D.hartke-core-imminent-latest SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.hartke-core-imminent-latest.xml">
-->
]>

<?rfc strict="no" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="std" ipr="trust200902" docName="draft-vanderstok-ace-coap-est-01">
  <front>
    <title abbrev="EST-coaps">EST over secure CoAP (EST-coaps)</title>
    
    <author initials="S.S." surname="Kumar" fullname="Sandeep S. Kumar">
      <organization>Philips Lighting Research</organization>
      <address>
        <postal>
          <street>High Tech Campus 7</street>
          <city>Eindhoven</city>
          <region></region>
          <code>5656 AE</code>
          <country>NL</country>
        </postal>
        <email>ietf@sandeep.de</email>
      </address>
    </author>
    <author fullname="Peter van der Stok" initials="P." surname="van der Stok">
      <organization>Consultant</organization>
      <address>
        <email>consultancy@vanderstok.org</email>
      </address>
    </author>
    <author fullname="Panos Kampanakis" initials="P" surname="Kampanakis">
      <organization>Cisco Systems</organization>
      <address>
        <email>pkampana@cisco.com</email>
      </address>
    </author>
    <author fullname="Martin Furuhed" initials="M" surname="Furuhed">
        <organization>Nexus Technology</organization>
        <address>
            <email>martin.furuhed@nexusgroup.com</email>
        </address>
    </author>
    <author fullname="Shahid Raza" initials="S" surname="Raza">
        <organization>RISE SICS </organization>
        <address>
            <postal>
                <street>Isafjordsgatan 22</street>
                <city>Kista</city>
                <region>Stockholm</region>
                <code>16440</code>
                <country>SE</country>
            </postal>
            <email>shahid@sics.se</email>
        </address>
    </author>
    
    <date/>
    <area>Security</area>
    <workgroup>ACE</workgroup>

    <abstract>
      <t>Low-resource devices in a Low-power and Lossy Network (LLN) can operate in a mesh network using the IPv6 over Low-power Wireless Personal Area Networks (6LoWPAN) and IEEE 802.15.4 link-layer standards. Provisioning these devices in a secure manner with keys (often called secure bootstrapping) used to encrypt and authenticate messages is the subject of Bootstrapping of Remote Secure Key Infrastructures (BRSKI) <xref target="I-D.ietf-anima-bootstrapping-keyinfra"/> and 6tisch Secure Join <xref target="I-D.ietf-6tisch-dtsecurity-secure-join"/>. Enrollment over Secure Transport (EST) <xref target="RFC7030"/>, based on TLS and HTTP, is used in BRSKI. Low-resource devices often use the lightweight Constrained Application Protocol (CoAP) <xref target="RFC7252"/> for message exchanges. This document defines how low-resource devices are expected to use EST over secure CoAP (EST-coaps) for secure bootstrapping and certificate enrollment. 6LoWPAN fragmentation management and minor extensions to CoAP are needed to enable EST-coaps.</t>
    </abstract>

  </front>


<middle>
  <section anchor="intro" title="Introduction">
    <t>IPv6 over Low-power Wireless Personal Area Networks (6LoWPANs) <xref target="RFC4944" /> on IEEE 802.15.4 <xref target="ieee802.15.4" /> wireless networks is becoming common in many industry application domains such as lighting controls. However commissioning of such networks suffers from a lack of standardized secure bootstrapping mechanisms for these networks.</t>
    <t>Although IEEE 802.15.4 defines how security can be enabled between nodes within a single mesh network, it does not specify the provisioning and management of the keys. Therefore securing a 6LoWPAN network with devices from multiple manufacturers with different provisioning techniques is often tedious and time consuming.</t>
    <t>Bootstrapping of Remote Secure Infrastructures (BRSKI) <xref target="I-D.ietf-anima-bootstrapping-keyinfra"/> addresses the issue of bootstrapping networked devices in the context of Autonomic Networking Integrated Model and Approach (ANIMA). <xref target="I-D.ietf-6tisch-minimal-security"/> and <xref target="I-D.ietf-6tisch-dtsecurity-secure-join"/> also address secure bootstrapping in the 6tisch context targeted to low-resource devices. BRSKI has not been developed specifically for low-resource devices in constrained networks. These networks use DTLS <xref target="RFC6347"/>, CoAP <xref target="RFC7252"/>, and UDP instead of TLS <xref target="RFC5246"/>, HTTP <xref target="RFC7230"/> and TCP. BRSKI relies on Enrollment over Secure Transport (EST) <xref target="RFC7030"/> for the provisioning of the operational domain certificates.
</t><t> 
EST-coaps provides a subset of EST functionality and extends EST with BRSKI functions. EST-coaps replaces the invocations of TLS and HTTP by UDP and CoAP invocations thus enabling EST and BRSKI to CoAP-based low-resource devices.</t>
   <t>In 6tisch the provisioning of the key material is supported by EDHOC <xref target="I-D.selander-ace-cose-ecdhe"/> and OSCOAP <xref target="I-D.ietf-core-object-security"/>, which provide security at the application level. It is the intention of this draft to enable EST over EDHOC to integrate the different network bootstrapping approaches.</t>
   <t>Although EST-coaps paves the way for the utilization of EST for constrained devices on constrained networks, some devices will not have enough resources to handle the large payloads that come with EST-coaps. The specification of EST-coaps is intended to ensure that bootstrapping works for less constrained devices that choose to limit their communications stack to UDP/CoAP. It is up to the network designer to decide which devices execute the EST protocol and which not.</t>
    <t>EST-coaps is designed for use in professional control networks such as Building Control. The autonomic bootstrapping is interesting because it reduces the manual intervention during the commissioning of the network. Typing in passwords is contrary to this wish. Therefore, the HTTP Basic authentication of EST is not supported in EST-coaps. </t>
    <t>In the constrained devices context it is very unlikely that full PKI request messages will be used. For that reason, full PKI messages are not supported in EST-coaps.</t>
    <t>Because the relatively large EST messages cannot be readily transported over constrained (6LoWPAN, LLN) wireless networks, this document specifies the use of CoAP Block-Wise Transfer ("Block") <xref target="RFC7959"/> to fragment EST messages at the application layer.</t>
    <t>Support for Observe CoAP options <xref target="RFC7641"/> with BRSKI is not supported in the current BRSKI/EST message flows and is thus out-of-scope for this discussion. Observe options could be used by the server to notify clients about a change in the cacerts or csr attributes (resources) and might be an area of future work.</t>

<section anchor="terminology" title="Terminology">
<t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.
</t>
<t>Many of the concepts in this document are taken over from <xref target="RFC7030"/>. Consequently, much text is directly traceable to <xref target="RFC7030"/>. The same document structure is followed to point out the differences and commonalities between EST and EST-coaps.</t>
<t>
  The following terms are defined in the BRSKI protocol <xref target="I-D.ietf-anima-bootstrapping-keyinfra"/>: pledge, Join proxy, Join Registrar, and Manufacturer Authorized Signing Authorities (MASA).
</t>

</section>  <!-- Terminology -->



  </section>  <!-- Introduction -->


  <section anchor="scenario" title="EST operational differences">
    <t>Only the differences to EST with respect to operational scenarios are described in this section. EST-coaps server differs from EST server as follows:
      <list style="symbols">
        <t>Replacement of TLS by DTLS and HTTP by CoAP, resulting in:
        <list>
          <t>DTLS-secured CoAP sessions between EST-coaps client and EST-coaps server.</t>
        </list></t>
        <t> Only certificate-based client authentication is supported, which results in:
          <list>
            <t>The EST-coaps client does not support HTTP Basic authentication (as described in Section 4.4.1 of <xref target="RFC7030"/>) </t>
            <t>The EST-coaps client does not support authentication at the application layer (as described in Section 3.2.2 of <xref target="RFC7030"/>).</t>
          </list></t>
        <t>EST-coaps does not support full PKI request messages<xref target="RFC5272"/>.</t>
        <t>EST-coaps specifies the BRSKI extensions over CoAP as specified in section 5 of <xref target="I-D.ietf-anima-bootstrapping-keyinfra"/>.</t>
      </list></t>
  </section>  <!-- Operational scenario overview -->

<section anchor="profile7925" title="Conformance to RFC7925 profiles">
<t>
This section shows how EST-coaps fits into the profiles of low-resource devices as described in <xref target="RFC7925"/>. Within the bootstrap context a Private Key Infrastructure (PKI) is used, where the client is called "pledge", the Registration Authority (RA) is called Join Registrar, and the Certificate Authority (CA) is represented by as many Manufacturer Authorized Signing Authorities (MASA) as there are manufacturers. A Join-Proxy is placed between client and RA to receive join requests over a 1-hop unsecured channel and transmitted over the secure network to the EST-server. The EST-server of EST-coaps is placed between proxy and RA or is part of RA.</t>
<t>EST-coaps transports (pre-)shared keys, Raw Public keys with private keys, and certificates. In the bootstrapping context,
EST-coaps transport is limited to certificates, as described in section 4.4 of <xref target="RFC7925"/>. </t>
<t> The mandatory cipher suite for DTLS is TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 defined in <xref target="RFC7251"/> which is the mandatory-to-implement cipher suite in CoAP. Additionally the curve secp256r1 MUST be supported <xref target="RFC4492"/>; this curve is equivalent to the NIST P-256 curve. The hash algorithm is SHA-256. DTLS implementations MUST use the Supported Elliptic Curves and Supported Point Formats Extensions <xref target="RFC4492"/>; the uncompressed point format MUST be supported; <xref target="RFC6090"/> can be used as an implementation method.
</t>
<t>The EST-coaps client MUST be configured with an explicit TA database or at least an implicit TA database from its manufacturer. The authentication of the EST-coaps server by the EST-coaps client is based on Certificate authentication in the DTLS handshake.</t>
      <t>The authentication of the EST-coaps client is based on client certificate in the DTLS handshake. This can either be
        <list style="symbols">
            <t>DTLS with a previously issued client certificate (e.g., an existing certificate issued by the EST CA); this could be a common case for simple re-enrollment of clients; </t>
          <t>DTLS with a previously installed certificate (e.g., manufacturer-installed certificate or a certificate issued by some other party);</t>
        </list>
</t>
</section>  <!-- 7925 profile  -->

  <section anchor="design" title="Protocol Design and Layering">
    <t>EST-coaps uses CoAP to transfer EST messages, aided by Block-Wise Transfer <xref target="RFC7959"/> to transport CoAP messages in blocks thus avoiding (excessive) 6LoWPAN fragmentation of UDP datagrams. The use of "Block" for the transfer of larger EST messages is specified in <xref target="fragment"/>. The <xref target="fig-est-coaps-layers"/> below shows the layered EST-coaps architecture.</t>
<figure align="center" title="EST-coaps protocol layers" anchor="fig-est-coaps-layers"><artwork><![CDATA[
+------------------------------------------------+
|    EST request/response messages               |
+------------------------------------------------+
|    CoAP for message transfer and signaling     |
+------------------------------------------------+
|    Secure Transport Protocol (DTLS, ...)       |
+------------------------------------------------+
|    UDP for transport                           |
+------------------------------------------------+
]]></artwork></figure>
    <t>The EST-coaps protocol design follows closely the EST design, excluding some aspects that are not relevant for automatic bootstrapping of constrained devices within a professional context. The parts supported by EST-coaps are identified by their message types:
          <list style="symbols">
            <t>Simple enroll and reenroll.</t>
            <t>CA certificate retrieval.</t> <!-- Needed when BRSKI is not applicable to establish the domain trust anchor -->
            <t>CSR Attributes request messages.</t>
            <t>Server-side key generation messages.</t>
          </list>
</t>
    <t>In the response to a /serverkeygen request, an EST server uses the multipart/mixed HTTP content type. The response message consists of two parts: the private key data and the certificate data. The CoAP RFC does not specify the multipart/mixed content type; it is though defined in an old draft: draft-fossati-core-multipart-ct-01.
    </t>
    
    <t>[EDNOTE: In EST-coaps, we need to define an equivalent CoAP content-format to match the HTTP multipart/mixed content type.</t>

<section anchor="discovery" title = "Discovery and URI">
<t>
EST-coaps is targeted to low-resource networks with small packets. Saving header space is important and the EST-coaps URI is smaller than the EST URI.
</t>
<t> The presence and location of (path to) the management data are discovered by sending a GET request to "/.well-known/core" including a resource type (RT) parameter with the value "core.est" <xref target="RFC6690"/>. Upon success, the return payload will contain the root resource of the EST resources. It is up to the implementation to choose its root resource, but it is recommended that the value "/est" is used, where possible. The example below shows the discovery of the presence and location of management data.
</t>
<figure><artwork align="left"><![CDATA[

  REQ: GET /.well-known/core?rt=core.est

  RES: 2.05 Content </est>; rt="core.est"
  
]]></artwork>
    </figure>

    <t>The EST-coaps server URIs differ from the EST URI by replacing the scheme https by coaps and by specifying smaller resource path names: </t>
<figure align="left"><artwork><![CDATA[
coaps://www.example.com/est/small-name 
]]></artwork></figure>
    <t>Figure 5 in section 3.2.2 of <xref target="RFC7030"/> enumerates the operations and corresponding paths which are supported by EST. <xref target="est-uri"/> provides the mapping from the EST and BRSKI URI path to the EST-coaps URI path.</t>

<texttable anchor="est-uri">
  <ttcol align="left">BRSKI</ttcol>
  <ttcol align="left">EST</ttcol>
  <ttcol align="left">EST-coaps</ttcol>
  
  <c> </c> <c> /cacerts  </c>           <c> /crts </c>
  <c> </c> <c> /simpleenroll </c>       <c> /sen </c>
  <c> </c> <c> /simplereenroll </c>     <c> /sren </c>
  <c> </c> <c> /csrattrs </c>           <c> /att </c>
  <c> </c> <c> /serverkeygen </c>       <c> /skg </c>
  <c> /requestvoucher </c> <c> </c>     <c> /rv </c>
  <c> /voucherstatus </c>  <c> </c>     <c> /vs </c>
  <c> /enrollstatus </c>   <c> </c>     <c> /es </c>
  
</texttable>



</section> <!-- discovery and URI -->

<section anchor="format" title ="Payload format">
    <t>The content-format (media type equivalent) of the CoAP message determines which EST message is transported in the CoAP payload. The media types specified in the HTTP Content-Type header(see section 3.2.2 of <xref target="RFC7030"/>) are in EST-coaps specified by the Content-Format Option (12) of CoAP. The combination of URI path-suffix and content-format used for coap MUST map to an allowed combination of path-suffix and media type as defined for EST. The required content-formats for these request and response messages are defined in <xref target="iana"/>. The CoAP response codes are defined in <xref target="error"/>.</t> 
    <t>EST-coaps is designed for use between low-resource devices using CoAP and hence does not need to send base64-encoded data. Simple CBOR byte string is more efficient (30% less payload compared to base64) and well supported by CoAP. Therefore, the content formats specification in <xref target="iana"/> requires the use of CBOR byte string for all EST-coaps CoAP payloads. [EDNOTE: Suggestion above is to use CBOR h'xxxx' ]</t>

</section> <!-- Payload format -->

    <section title="Message Bindings">
      <t>This section describes BRSKI to CoAP message mappings.</t>
      <t>All /crts, /sen, /sren, /att, /skg, /rv, /vs, and /es EST-coaps messages expect a response, so they are all COAP CON messages.</t>
      
      <t>The Ver, TKL, Token, and Message ID values of the coap header are not influenced by EST.</t>

      <t>Coap options are used to convey Uri-Host, Uri-Path, Uri-Port, Content-Format and more in COAP. The CoAP Options are used to communicate the HTTP fields specified in the BRSKI REST messages. </t>

      <t>BRSKI URLs are HTTPS based (https:// ), in CoAP these will be assumed to be transformed to coaps (coaps://)</t>

      <t>Some examples of how an BRSKI message would be translated in CoAP follow. [EDNOTE: This section to be expanded to ensure it covers all BRSKI edge conditions.] <xref target="messagebindings"/> includes some practical examples of EST messages translated to CoAP. 
</t>
    </section> <!-- Message bindings -->

    <section anchor="error" title="CoAP response codes">
      <t>Section 5.9 of <xref target="RFC7252"/> specifies the mapping of HTTP response codes to CoAP response codes. Every time the HTTP response code 200 is specified in <xref target="RFC7030"/> in response to a GET request, in EST-coaps the equivalent CoAP response code 2.05 MUST be used. Response code HTTP 202 in EST is mapped to CoAP 2.06 as specified in
<!-- <xref target="I-D.hartke-core-imminent-latest"/>
-->
[I-D.hartke-core-imminent-latest].
All other HTTP 2xx response codes are not used by EST. For the following HTTP 4xx error codes that may occur: 400, 401, 403, 404, 405, 406, 412, 413, 415 ; the equivalent CoAP response code for EST-coaps is 4.xx. For the HTTP 5xx error codes: 500, 501, 502, 503, 504 the equivalent CoAP response code is 5.xx.</t>
      
      <t><xref target="messagebindings"/> includes some practical examples of HTTP response codes from EST translated to CoAP.</t>
    </section> <!-- CoAP response codes -->

    <section anchor="fragment" title="Message fragmentation">
      <t>DTLS defines fragmentation only for the handshake part and not for secure data exchange (DTLS records). <xref target="RFC6347"/> states "Each DTLS record MUST fit within a single datagram". In order to avoid using IP fragmentation, which is not supported by 6LoWPAN, invokers of the DTLS record layer MUST size DTLS records so that they fit within any Path MTU estimates obtained from the record layer. In addition, invokers residing on a 6LoWPAN over IEEE 802.15.4 network SHOULD attempt to size CoAP messages such that each DTLS record will fit within one or two IEEE 802.15.4 frames.</t>
      <t>That is not always possible. Even though ECC certificates are small in size, they can vary greatly based on signature algorithms, key sizes, and OID fields used. For 256-bit curves, common ECDSA cert sizes are 500-1000 bytes which could fluctuate further based on the algorithms, OIDs, SANs and cert fields. For 384-bit curves, ECDSA certs increase in size and can sometimes reach 1.5KB. Additionally, there are times when the EST cacert response from the server can include multiple certs that amount to large payloads. CoAP <xref target="RFC7252"/>'s section 4.6 describes the possible payload sizes: "if nothing is known about the size of the headers, good upper bounds are 1152 bytes for the message size and 1024 bytes for the payload size". Also "If IPv4 support on unusual networks is a consideration, implementations may want to limit themselves to more conservative IPv4 datagram sizes such as 576 bytes; per [RFC0791], the absolute minimum value of the IP MTU for IPv4 is as low as 68 bytes, which would leave only 40 bytes minus security overhead for a UDP payload". Thus, even with ECC certs, EST-coaps messages can still exceed sizes in MTU of 1280 for IPv6 or 60-80 bytes for 6LoWPAN <xref target="RFC4919"/> as explained in section 2 of <xref target="RFC7959"/>. EST-coaps needs to be able to fragment EST messages into multiple DTLS datagrams with each DTLS datagram. Fine-grained fragmentation of EST messages is essential.</t>
      <t>To perform fragmentation in CoAP, <xref target="RFC7959"/> specifies the "Block1" option for fragmentation of the request payload and the "Block2" option for fragmentation of the return payload of a CoAP flow. </t>

      
      <t>The BLOCK draft defines SZX in the Block1 and block2 option fields. These are used to convey the size of the blocks in the requests or responses. 
</t><t>
The CoAP client MAY specify the Block1 size and MAY also specify the Block2 size.  The CoAP server MAY specify the Block2 size, but not the Block1 size. As explained in Section 1 of <xref target="RFC7959"/>), blockwise transfers SHOULD be used in Confirmable CoAP messages to avoid the exacerbation of lost blocks.</t>
<t>
The Size1 response MAY be parsed by the client as a size indication of the Block2 resource in the server response or by the server as a request for a size estimate by the client. Similarly, Size2 option defined in BLOCK should be parsed by the server as an indication of the size of the resource carried in Block1 options and by the client as a maximum size expected in the 4.13 (Request Entity Too Large) response to a request.</t>
      
      <t>Examples of fragmented messages are shown in <xref target="blockexamples"/>.
</t>
    </section> <!-- Message fragmentation -->
</section> <!-- protocol design and layering -->


  <section anchor="transport" title = "Transport Protocol">
    <!-- [EDNOTE: This section mostly talked about DTLS. Panos renamed it to Transport Protocol that addresses DTLS and could be later updated to address COSE concerns etc. ] -->
    <t>EST-coaps depends on a secure transport mechanism over UDP that can secure (confidentiality, authenticity) the CoAP messages exchanged. </t>
    
    <section title = "DTLS">
      <t> DTLS is one such secure protocol. Within BRSKI and EST when "TLS" is referred to, it is understood that in EST-coaps, security is provided using DTLS instead. No other changes are necessary (all provisional modes etc are the same as for TLS).</t>
      <t>CoAP was designed to avoid fragmentation. DTLS is used to secure CoAP messages. When using DTLS, even though it can be avoided by using pre-shared keys or ECC ciphersuites, sometimes fragmentation will be needed. During the DTLS handshake, if fragmentation is necessary, "DTLS provides a mechanism for fragmenting a handshake message over a number of records, each of which can be transmitted separately, thus avoiding IP fragmentation" <xref target="RFC6347"/>.</t>
      <t>EST-coaps does not support full PKI Requests. Consequently, the fullcmc request of section 4.3 of <xref target="RFC7030"/> and response MUST NOT be supported by EST-coaps.</t>
      <t>Channel-binding information for linking proof-of-identity with message-based proof-of-possession is optional for EST-coaps. Given that CoAP and DTLS can provide proof of identity for EST-coaps clients and server, simple PKI messages can be used conformant to section 3.1 of <xref target="RFC5272"/>. EST-coaps supports the certificate types and Trust Anchors (TA) that are specified for EST in section 3 of <xref target="RFC7030"/>.</t>
        <t>
          When proof-of-possession is desired, a set of actions are required regarding the use of tls-connect, described in section 3.5 in <xref target="RFC7030"/> -- Linking Identity and POP Information. tls-unique translates to the contents of the first "Finished" message in the TLS handshake between server and client. The client is then supposed to add this "Finished" message as a ChallengePassword to the PKCS#10 to prove that the client is indeed in control of the private key at the time of the TLS session when performing a /simpleenroll, for example. In the case of EST-coaps, the same operations can perform but during the DTLS handshake.</t>
        
        <t>
[EDNOTE: The above text is not very clear and needs reviewing. Double check the working of "tls-unique"]</t><t>
[EDNOTE: To describe POP in the DTLS context]</t>
      <t>In a constrained CoAP environment, endpoints can't afford to establish a DTLS connection for every EST transaction. Authenticating and negotiating DTLS keys requires resources on low-end endpoints and consumes valuable bandwidth. The DTLS connection SHOULD remain open for persistent EST connections. For example, an EST cacerts request that is followed by a simpleenroll request can use the same authenticated DTLS connection. Given that after a successful enrollment, it is more likely that a new EST transaction will take place after a significant amount of time, the DTLS connections SHOULD only be kept alive for EST messages that are relatively close to each other.
</t>
    </section>
    <section title = "[EDNOTE: Placeholder for EDHOC]">
      <t>[EDNOTE: Other secure transport mechanisms placeholder section. ]</t>
    </section>
  </section> <!-- Transport Protocol -->


  <section title="Proxying">
    <t>[EDNOTE: This section to be populated. It will address how proxying can take place by an entity that resides at the edge of the CoAP network, such as the Registrar, and can reach the BRSKI server residing in a traditional "TCP setting". ]</t>
  </section>

  <section title="Parameters">
    <t>[EDNOTE: This section to be populated. It will address transmission parameters for BRSKI described in sections 4.7 and 4.8 of the CoAP draft. BRSKI does not impose any unique parameters that affect the CoAP parameters in Table 2 and 3 in the CoAP draft but the ones in CoAP could be affecting BRSKI. For example the processing delay of CAs could be less then 2s, but in this case they should send an CoAP ACK every 2s while processing.]</t>
  </section>

  <section anchor="iana" title="IANA Considerations">
    <t>Additions to the sub-registry "CoAP Content-Formats", within the "CoRE Parameters" registry are needed for the below media types. These can be registered either in the Expert Review range (0-255) or IETF Review range (256-9999).
    <list style="numbers">
      <t><list style ="symbols">
           <t>application/pkcs7-mime</t>
           <t>Type name: application</t>
           <t>Subtype name: pkcs7-mime</t>
           <t>smime-type: certs-only </t>
           <t> ID: TBD1 </t>
           <t>Required parameters: None</t>
           <t>Optional parameters: None </t>
           <t>Encoding considerations: CBOR byte string</t>
           <t>Security considerations: As defined in this specification</t>
           <t>Published specification: <xref target="RFC5751"/> </t>
           <t>Applications that use this media type: ANIMA Bootstrap (BRSKI) and EST</t>
         </list></t>
      <t><list style ="symbols">
           <t>application/pkcs8</t>
           <t>Type name: application</t>
           <t>Subtype name: pkcs8</t>
           <t>ID: TBD2 </t>
           <t>Required parameters: None</t>
           <t>Optional parameters: None </t>
           <t>Encoding considerations: CBOR byte string</t>
           <t>Security considerations: As defined in this specification</t>
           <t>Published specification: <xref target="RFC5958"/> </t>
           <t>Applications that use this media type: ANIMA Bootstrap (BRSKI) and EST</t>
        </list></t>
      <t><list style ="symbols">
           <t>application/csrattrs</t>
           <t>Type name: application</t>
           <t>Subtype name: csrattrs</t>
           <t> ID: TBD3 </t>
           <t>Required parameters: None</t>
           <t>Optional parameters: None </t>
           <t>Encoding considerations: CBOR byte string</t>
           <t>Security considerations: As defined in this specification</t>
           <t>Published specification: <xref target="RFC7030"/> </t>
           <t>Applications that use this media type: ANIMA Bootstrap (BRSKI) and EST</t>
         </list></t>
      <t><list style ="symbols">
           <t>application/pkcs10</t>
           <t>Type name: application</t>
           <t>Subtype name: pkcs10</t>
           <t> ID: TBD4 </t>
           <t>Required parameters: None</t>
           <t>Optional parameters: None </t>
           <t>Encoding considerations: CBOR byte string</t>
           <t>Security considerations: As defined in this specification</t>
           <t>Published specification: <xref target="RFC5967"/> </t>
           <t>Applications that use this media type: ANIMA bootstrap (BRSKI) and EST</t>
   <t><list style ="symbols">
           <t>application/pkcs12</t>
           <t>Type name: application</t>
           <t>Subtype name: pkcs12</t>
           <t> ID: TBD5 </t>
           <t>Required parameters: None</t>
           <t>Optional parameters: None </t>
           <t>Encoding considerations: CBOR byte string</t>
           <t>Security considerations: As defined in this specification</t>
           <t>Published specification: IETF </t>
           <t>Applications that use this media type: ANIMA bootstrap (BRSKI) and EST</t>
         </list></t>
   <t><list style ="symbols">
           <t>application/auditnonce</t>
           <t>Type name: application</t>
           <t>Subtype name: auditnonce</t>
           <t> ID: TBD6 </t>
           <t>Required parameters: None</t>
           <t>Optional parameters: None </t>
           <t>Encoding considerations: CBOR byte string</t>
           <t>Security considerations: As defined in this specification</t>
           <t>Published specification: BRSKI?? </t>
           <t>Applications that use this media type: ANIMA bootstrap (BRSKI)</t>
         </list></t>
    <t><list style ="symbols">
           <t>application/authorizationvoucher</t>
           <t>Type name: application</t>
           <t>Subtype name: authorizationvoucher</t>
           <t> ID: TBD7 </t>
           <t>Required parameters: None</t>
           <t>Optional parameters: None </t>
           <t>Encoding considerations: CBOR byte string</t>
           <t>Security considerations: As defined in this specification</t>
           <t>Published specification: BRSKI?? </t>
           <t>Applications that use this media type: ANIMA bootstrap (BRSKI)</t>
         </list></t>

      </list></t>


    </list>
</t>
   <t>
Additions to the sub-registry "CoAP Resource Type", within the "CoRE Parameters" registry are needed for a new resource type. 
<list style="symbols">
    <t>rt="core.est" needs registration with IANA.</t>
  </list>
 
 </t><t>
[EDNOTE: This section will be expanded to includes types needed that do not exist in CoAP.] </t>
  </section>  <!-- IANA consideration -->

  <section anchor="sec" title="Security Considerations">
    <t>[EDNOTE: This section to be populated. This document describes an existing protocol moved to CoAP and there should not be additional security concerns added beyond the protocol's or CoAP's specifics security considerations. The security considerations mentioned in EST applies also to EST-coaps. Specifically for server-side key generation, it introduces implications for the endpoints and their private keys, which will be covered here. ]</t>
  </section>  <!-- Security considerations  -->

  <section anchor="ack" title="Acknowledgements">
    <t>The authors are very grateful to Klaus Hartke for his detailed explanations on the use of Block with DTLS. The authors would like to thank Esko Dijk and Michael Verschoor for the valuable discussions that helped in shaping the solution. They would also like to thank Peter Panburana from Cisco for his feedback on technical details of the solution.</t>
  </section> <!-- Acknowledgements  -->

  <section anchor="changes" title="Change Log">
    <t> -01:
         <list style="empty">
           <t>Merging of draft-vanderstok-ace-coap-est-00 and draft-vanderstok-ace-coap-est-01</t>
           <t> URI and discovery are modified </t>
           <t> More text about EDHOC and OSCOAP </t>
           <t> mapping to DICE IoT profiles </t>
         </list>
    </t>
  </section> <!-- Change Log -->
</middle>


<back>
  <references title="Normative References">
    &RFC2119;
    &RFC5272;
    &RFC5751;
    &RFC5967;
    &RFC6347;  
    &RFC7030;
    &RFC7252;
    &RFC7959;
    &I-D.ietf-anima-bootstrapping-keyinfra;
<!--
    &I-D.hartke-core-imminent-latest;
-->
  </references>
  <references title="Informative References">
    &RFC4492;
    &RFC4944;
    &RFC5246;
    &RFC5958;
    &RFC6090;
    <!-- &RFC6838; -->
    &RFC6690;
    &RFC7230;
    &RFC7251;
    &RFC7641;
    &RFC7925;
    &RFC4919;
    &I-D.ietf-6tisch-dtsecurity-secure-join;
    &I-D.ietf-6tisch-minimal-security;
    &I-D.selander-ace-cose-ecdhe;
    &I-D.ietf-core-object-security; 
    <reference anchor="ieee802.15.4">
      <front>
        <title>IEEE Standard 802.15.4-2006</title>
        <author surname="Institute of Electrical and Electronics Engineers">
        </author>
        <date month="" year="2006" />
      </front>
    </reference>
  </references>

  <section anchor="messagebindings" title="EST messages to EST-coaps">
    <section title="cacerts">
      <t>In EST, an HTTPS cacerts message can be</t>
      <figure>
        <artwork><![CDATA[  
GET /.well-known/est/cacerts HTTP/1.1
     User-Agent: curl/7.22.0 (i686-pc-linux-gnu) libcurl/7.22.0 
                 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3
     Host: 192.0.2.1:8085
     Accept: */*]]></artwork>
      </figure>

      <t>The corresponding CoAP request is </t>
<figure align="left"><artwork><![CDATA[
GET coaps://[192.0.2.1:8085]/est/crts
]]></artwork></figure>
      <t>with CoAP fields</t>
      <figure><artwork>
<![CDATA[  Ver = 1
  T = 0 (CON)
  Code = 0x01 (0.01 is GET)
  Options
   Option1 (Uri-Host)
     Option Delta = 0x3  (option nr = 3)
     Option Length = 0x9
     Option Value = 192.0.2.1
   Option2 (Uri-Port)
     Option Delta = 0x4  (option nr = 4+3=7)
     Option Length = 0x4
     Option Value = 8085
   Option3 (Uri-Path)
     Option Delta = 0x4   (option nr = 7+4= 11)
     Option Length = 0x9
     Option Value = /est/crts
  Payload = [Empty]
]]></artwork></figure>

      <t>A 200 OK response with a cert in EST will then be</t>
      <figure><artwork>
<![CDATA[
  200 OK
   Status: 200 OK
   Content-Type: application/pkcs7-mime
   Content-Transfer-Encoding: base64
   Content-Length: 4246 [EDNOTE: this example overflows and would
                         need fragmentation. Choose a better example.
                         Regardless we might need an CoAP option for
                         the content-length ie the CoAP payload?)

   MIIMOQYJKoZIhvcNAQcCoIIMKjCCDCYCAQExADALBgkqhkiG9w0BBwGgggwMMIIC
   +zCCAeOgAwIBAgIJAJpY3nUZO3qcMA0GCSqGSIb3DQEBBQUAMBsxGTAXBgNVBAMT
   ...]]></artwork></figure>

        <t>The corresponding CoAP response is </t>
          <figure align="left"><artwork><![CDATA[
2.05 Content (Content-Format: application/pkcs7-mime)
   {payload}
]]></artwork></figure>
        <t>with CoAP fields </t>
          <figure><artwork>
<![CDATA[  Ver = 1
  T = 2 (ACK)
  Code = 0x45 (2.05 Content)
  Options
    Option1 (Content-Format)
      Option Delta = 0xC  (option nr = 12)
      Option Length = 0x2
      Option Value = TBD1 (defined in this note)
                
  Payload = h'123456789ABCDEF...'
]]></artwork></figure>
    </section>  <!-- cacerts -->

    <section title="enroll / reenroll">
      <t>[EDNOTE: username/password authentication can be described here but is
        not a primary focus for BRSKI. It is important for generic EST exchanges
        but would an endpoint device with sufficient user interface to allow
        username/password input from an end user be required to use CoAP instead
        of a full HTTPS exchange?]</t>

      <t>[EDNOTE: We might need a new Option for the Retry-After response
        message. We might need a new Option for the WWW-Authenticate
        response.]</t>

      <t>[EDNOTE: Include CoAP message examples. ]</t>
    </section>  <!-- enroll / reenroll -->

    <section title="csrattr">
      <t>[EDNOTE: Include CoAP message examples. ]</t>
    </section>  <!-- csrattr -->

    <section title="enrollstatus">
      <t>[EDNOTE: Include CoAP message examples. ]</t>
    </section>  <!-- enrollstatus -->

    <section title="voucher_status">
      <t>[EDNOTE: Include CoAP message examples. ]</t>
    </section>  <!-- voucher_status -->

    <section title="requestvoucher">
      <t>[EDNOTE: Include CoAP message examples. ]</t>
    </section>  <!-- requestvoucher -->

    <section title="requestlog">
      <t>[EDNOTE: Include CoAP message examples. ]</t>
      <t>[EDNOTE: More examples can be added, for server-side key generation in CMS envelopes. ]</t>
    </section>  <!-- requestlog -->
  </section>  <!-- EST messages to EST-coaps -->

  <section anchor="blockexamples" title="EST-coaps Block message examples">
    <t>This section provides a detailed example of the messages using DTLS and BLOCK option Block2. The minimum PMTU is 1280 bytes, which is the example value assumed for the DTLS datagram size. The example block length is taken as 64 which gives an SZX value of 2.</t>
    <t>The following is an example of a valid /cacerts exchange over DTLS. <!-- During the initial DTLS handshake, the client can ignore the optional server-generated "certificate request" and can instead proceed with the CoAP GET request -->. The content length of the cacerts response in appendix A.1 of <xref target="RFC7030"/> is 4246 bytes using base64. This leads to a length of 3185 bytes in binary. The CoAP message adds around 10 bytes, the DTLS record 29 bytes. To avoid IP fragmentation, the CoAP block option is used and an MTU of 127 is assumed to stay within one IEEE 802.15.4 packet. To stay below the MTU of 127, the payload is split in 50 packets with a payload of 64 bytes each. The client sends an IPv6 packet containing the UDP datagram with the DTLS record that encapsulates the CoAP Request 50 times. The server returns an IPv6 packet containing the UDP datagram with the DTLS record that encapsulates the CoAP response. The CoAP request-response exchange with block option is shown below. Block option is shown in a decomposed way indicating the kind of Block option (2 in this case because used in the response) followed by a colon, and then the block number (NUM), the more bit (M = 0 means last block), and block size exponent (2**(SZX+4)) separated by slashes. The Length 64 is used with SZX= 2 to avoid IP fragmentation. The CoAP Request is sent with confirmable (CON) option and the content format of the Response is /application/cacerts.
</t>
    <figure align="left"><artwork><![CDATA[
GET [192.0.2.1:8085]/est/crts     -->
              <--   (2:0/1/64) 2.05 Content
    GET URI (2:1/1/64)                           -->
              <--   (2:1/1/64) 2.05 Content
                      |
                      |
                      |
     GET URI (2:49/1/64)                         -->
              <--   (2:49/0/64) 2.05 Content
]]></artwork></figure>
<t>
For further detailing the coap headers of the first two blocks are written out.
</t><t>
The header of the first GET looks like:
</t>
<figure><artwork>
<![CDATA[  
  Ver = 1
  T = 0 (CON)
  Code = 0x01 (0.1 GET) 
  Options
   Option1 (Uri-Host)
     Option Delta = 0x3  (option nr = 3)
     Option Length = 0x9
     Option Value = 192.0.2.1
   Option2 (Uri-Port)
     Option Delta = 0x4   (option nr = 3+4=7)
     Option Length = 0x4
     Option Value = 8085
   Option3 (Uri-Path)
     Option Delta = 0x4    (option nr = 7+4=11)
     Option Length = 0x9
     Option Value = /est/crts
  Payload = [Empty]

]]></artwork>
          </figure>

    <t>The header of the first response looks like:
</t>
    <figure><artwork>
<![CDATA[  
  Ver = 1
  T = 2 (means ACK)
  Code = 0x45 (2.05 Content)
  Options
    Option1 (Content-Format)
      Option Delta = 0xC   (option nr = 12)
      Option Length = 0x2
      Option Value = TBD1   (value defined in this draft)
    Option2 (Block2)
      Option Delta = 0xB    (option nr = 11+12=23)
      Option Length = 0x1
      Option Value = 0x1D   (szx=2, M=0, number 0)
  Payload = h'123456789ABCDF'.. (64 bytes)
]]></artwork></figure>

<t> [EDNOTE: The contents of the payload do not need to be written as they are encoded with DTLS into something unreadable.]
</t><t>
[EDNOTE: I want to suppress the example with the http - coap conversion below]
</t>

<t>As another example, let's assume that the cacerts message will need to be broken up to three messages. The first Block2 will be
</t> 
    <figure><artwork>
<![CDATA[  Ver = 1
  T = 2 (ACK)
  Code = 0x45 (2.05 Content.) 
  Options
    Option1 (Content-Format)
      Option Delta = 0xC  (option 12)
      Option Length = 0x2
      Option Value = TBD1                  
    Option2 (Block2)
      Option Delta = 0xB  (option 23 = 12 + 11)
      Option Length = 0x1
      Option Value = 0x0A (block number = 0, M=1, SZX=2)
  Payload = h'123456789ABCDEF...' (512 bytes)
]]></artwork>
          </figure>

    <t>The second Block2:
</t>
    <figure><artwork>
<![CDATA[  Ver = 1
  T = 2 (means ACK)
  Code = 0x45 (2.05 Content.)
  Options
    Option1 (Content-Format)
      Option Delta = 0xC   (option 12)
      Option Length = 0x2
      Option Value = TBD1
    Option2 (Block2)
      Option Delta = 0xB  (option 23 = 12 + 11)
      Option Length = 0x1
      Option Value = 0x1D (block number = 1, M=1, SZX=2)
  Payload = = h'123456789ABCDEF...' (512 bytes)
]]></artwork></figure>

    <t>The 49th and final Block2:
</t>
    <figure><artwork>
<![CDATA[  Ver = 1
  T = 2 (means ACK)
  Code = 0x21
  Options
    Option1 (Content-Format)
      Option Delta = 0xC   (option 12)
      Option Length = 0x2
      Option Value = TBD1
    Option2 (Block2)
      Option Delta = 0xB  (option 23 = 12 + 11)
      Option Length = 0x2
      Option Value = 0x312 (block number = 49, M=0, SZX=2)
  Payload = = h'123456789ABCDEF...' (512 bytes)

]]></artwork></figure>

      <t>[EDNOTE: This is wrong because does not use DTLS,
should be aligned with example above in this appendix B, and conversion from base64 to CBOR byte string should be done ] </t>

      
  </section> <!-- EST-coaps Block message examples -->
</back>

</rfc>
