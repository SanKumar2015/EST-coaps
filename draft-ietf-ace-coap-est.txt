



ACE                                                      P. van der Stok
Internet-Draft                                                Consultant
Intended status: Standards Track                           P. Kampanakis
Expires: July 4, 2019                                      Cisco Systems
                                                           M. Richardson
                                                                     SSW
                                                                 S. Raza
                                                               RISE SICS
                                                       December 31, 2018


                    EST over secure CoAP (EST-coaps)
                       draft-ietf-ace-coap-est-07

Abstract

   Enrollment over Secure Transport (EST) is used as a certificate
   provisioning protocol over HTTPS.  Low-resource devices often use the
   lightweight Constrained Application Protocol (CoAP) for message
   exchanges.  This document defines how to transport EST payloads over
   secure CoAP (EST-coaps), which allows constrained devices to use
   existing EST functionality for provisioning certificates.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on July 4, 2019.

Copyright Notice

   Copyright (c) 2018 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of



van der Stok, et al.      Expires July 4, 2019                  [Page 1]

Internet-Draft                  EST-coaps                  December 2018


   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Change Log  . . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   5
   3.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   5
   4.  Conformance to RFC7925 profiles . . . . . . . . . . . . . . .   6
   5.  Protocol Design . . . . . . . . . . . . . . . . . . . . . . .   7
     5.1.  Mandatory/optional EST Functions  . . . . . . . . . . . .   7
     5.2.  Payload format  . . . . . . . . . . . . . . . . . . . . .   8
       5.2.1.  Content Format application/multipart-core . . . . . .   8
     5.3.  Message Bindings  . . . . . . . . . . . . . . . . . . . .   9
     5.4.  CoAP response codes . . . . . . . . . . . . . . . . . . .  10
     5.5.  Message fragmentation . . . . . . . . . . . . . . . . . .  10
     5.6.  Delayed Responses . . . . . . . . . . . . . . . . . . . .  11
     5.7.  Server-side Key Generation  . . . . . . . . . . . . . . .  13
     5.8.  Deployment limits . . . . . . . . . . . . . . . . . . . .  14
   6.  Discovery and URIs  . . . . . . . . . . . . . . . . . . . . .  15
   7.  DTLS Transport Protocol . . . . . . . . . . . . . . . . . . .  16
   8.  HTTPS-CoAPS Registrar . . . . . . . . . . . . . . . . . . . .  18
   9.  Parameters  . . . . . . . . . . . . . . . . . . . . . . . . .  19
   10. IANA Considerations . . . . . . . . . . . . . . . . . . . . .  20
     10.1.  Content-Format Registry  . . . . . . . . . . . . . . . .  20
     10.2.  Resource Type registry . . . . . . . . . . . . . . . . .  21
   11. Security Considerations . . . . . . . . . . . . . . . . . . .  22
     11.1.  EST server considerations  . . . . . . . . . . . . . . .  22
     11.2.  HTTPS-CoAPS Registrar considerations . . . . . . . . . .  23
   12. Contributors  . . . . . . . . . . . . . . . . . . . . . . . .  24
   13. Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  24
   14. References  . . . . . . . . . . . . . . . . . . . . . . . . .  24
     14.1.  Normative References . . . . . . . . . . . . . . . . . .  24
     14.2.  Informative References . . . . . . . . . . . . . . . . .  25
   Appendix A.  EST messages to EST-coaps  . . . . . . . . . . . . .  28
     A.1.  cacerts . . . . . . . . . . . . . . . . . . . . . . . . .  28
     A.2.  csrattrs  . . . . . . . . . . . . . . . . . . . . . . . .  31
     A.3.  enroll / reenroll . . . . . . . . . . . . . . . . . . . .  31
     A.4.  serverkeygen  . . . . . . . . . . . . . . . . . . . . . .  33
   Appendix B.  Disassembly Examples . . . . . . . . . . . . . . . .  35
     B.1.  cacerts payload disassembly . . . . . . . . . . . . . . .  36
     B.2.  Re-enroll payload disassemblies . . . . . . . . . . . . .  37
     B.3.  Serverkey generation disassembly  . . . . . . . . . . . .  40
   Appendix C.  EST-coaps Block message examples . . . . . . . . . .  41



van der Stok, et al.      Expires July 4, 2019                  [Page 2]

Internet-Draft                  EST-coaps                  December 2018


     C.1.  cacerts block example . . . . . . . . . . . . . . . . . .  42
     C.2.  enroll block example  . . . . . . . . . . . . . . . . . .  44
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  45

1.  Change Log

   EDNOTE: Remove this section before publication

   -07:

      redone examples from scratch with openssl

      Updated authors.

      Added CoAP RST as a MAY for an equivalent to an HTTP 204 message.

      Added serialization example of the /skg CBOR response.

      Added text regarding expired IDevIDs and persistent DTLS
      connection that will start using the Explicit TA Database in the
      new DTLS connection.

      Nits and fixes

      Removed CBOR envelop for binary data

      Replaced TBD8 with 62.

      Added RFC8174 reference and text.

      Clarified MTI for server-side key generation and Content-Formats.
      Defined the /skg MTI (PKCS#8) and the cases where CMS encryption
      will be used.

      Moved Fragmentation section up because it was referenced in
      sections above it.

   -06:

      clarified discovery section, by specifying that no discovery may
      be needed for /.well-known/est URI.

      added resource type values for IANA

      added list of compulsory to implement and optional functions.

      Fixed issues pointed out by the idnits tool.




van der Stok, et al.      Expires July 4, 2019                  [Page 3]

Internet-Draft                  EST-coaps                  December 2018


      Updated CoAP response codes section with more mappings between EST
      HTTP codes and EST-coaps CoAP codes.

      Minor updates to the MTI EST Functions section.

      Moved Change Log section higher.

   -05:

      repaired again

      TBD8 = 62 removed from C-F registration, to be done in CT draft.

   -04:

      Updated Delayed response section to reflect short and long delay
      options.

   -03:

      Removed observe and simplified long waits

      Repaired content-format specification

   -02:

      Added parameter discussion in section 8

      Concluded content-format specification using multipart-ct draft

      examples updated

   -01:

      Editorials done.

      Redefinition of proxy to Registrar in Section 8.  Explained better
      the role of https-coaps Registrar, instead of "proxy"

      Provide "observe" option examples

      extended block message example.

      inserted new server key generation text in Section 5.7 and
      motivated server key generation.

      Broke down details for DTLS 1.3




van der Stok, et al.      Expires July 4, 2019                  [Page 4]

Internet-Draft                  EST-coaps                  December 2018


      New media type uses CBOR array for multiple content-format
      payloads

      provided new content format tables

      new media format for IANA

   -00

      copied from vanderstok-ace-coap-04

2.  Introduction

   "Classical" Enrollment over Secure Transport (EST) [RFC7030] is used
   for authenticated/authorized endpoint certificate enrollment (and
   optionally key provisioning) through a Certificate Authority (CA) or
   Registration Authority (RA).  EST messages run over HTTPS.

   This document defines a new transport for EST based on the
   Constrained Application Protocol (CoAP) since some Internet of Things
   (IoT) devices use CoAP instead of HTTP.  Therefore, this
   specification utilizes DTLS [RFC6347], CoAP [RFC7252], and UDP
   instead of TLS [RFC8446], HTTP [RFC7230] and TCP.

   EST responses can be relatively large and for this reason this
   specification also uses CoAP Block-Wise Transfer [RFC7959] to offer a
   fragmentation mechanism of EST messages at the CoAP layer.

   This document also profiles the use of EST to only support
   certificate-based client authentication.  HTTP Basic or Digest
   authentication (as described in Section 3.2.3 of [RFC7030] are not
   supported.

3.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   Many of the concepts in this document are taken over from [RFC7030].
   Consequently, much text is directly traceable to [RFC7030].  The same
   document structure is followed to point out the differences and
   commonalities between EST and EST-coaps.






van der Stok, et al.      Expires July 4, 2019                  [Page 5]

Internet-Draft                  EST-coaps                  December 2018


4.  Conformance to RFC7925 profiles

   This section shows how EST-coaps fits into the profiles of low-
   resource devices described in [RFC7925].  EST-coaps can transport
   certificates and private keys.  Certificates are responses to
   (re-)enrollment requests or requests for a trusted certificate list.
   Private keys can be transported as responses to a server-side key
   generation request as described in section 4.4 of [RFC7030] snd
   discussed in Section 5.7 of this document.

   As per Sections 3.3 and 4.4 of [RFC7925], the mandatory cipher suite
   for DTLS in EST-coaps is TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8
   [RFC7251].  Curve secp256r1 MUST be supported [RFC8422]; this curve
   is equivalent to the NIST P-256 curve.  Crypto agility is important,
   and the recommendations in [RFC7925] section 4.4 and any updates to
   RFC7925 concerning Curve25519 and other CFRG curves also apply.

   DTLS1.2 implementations MUST use the Supported Elliptic Curves and
   Supported Point Formats Extensions [RFC8422].  Uncompressed point
   format MUST also be supported.  [RFC6090] can be used as summary of
   the ECC algorithms.  DTLS 1.3 [I-D.ietf-tls-dtls13] implementations
   differ from DTLS 1.2 because they do not support point format
   negotiation in favor of a single point format for each curve and thus
   support for DTLS 1.3 does not mandate point formation extensions and
   negotiation.

   The authentication of the EST-coaps server by the EST-coaps client is
   based on certificate authentication in the DTLS handshake.  The EST-
   coaps client MUST be configured with at least an Implicit TA database
   from its manufacturer which will allow for the authenticating the
   server the first time before updating its trust anchor (Explicit TA)
   [RFC7030].

   The authentication of the EST-coaps client is based on a client
   certificate in the DTLS handshake.  This can either be

   o  a previously issued client certificate (e.g., an existing
      certificate issued by the EST CA); this could be a common case for
      simple reenrollment of clients.

   o  a previously installed certificate (e.g., manufacturer-installed
      IDevID (IEEE 802.1AR [ieee802.1ar] certificate or a certificate
      issued by some other party); the server is expected to trust the
      previously installed certificate in this case.  IDevID's are
      expected to have a very long life, as long as the device, but
      under some conditions could expire.  In the latter case, the
      server MAY want to authenticate a client certificate against its
      trust store although the certificate is expired (Section 11).



van der Stok, et al.      Expires July 4, 2019                  [Page 6]

Internet-Draft                  EST-coaps                  December 2018


   Client authentication via DTLS Client Certificate is mandatory.

5.  Protocol Design

   EST-coaps uses CoAP to transfer EST messages, aided by Block-Wise
   Transfer [RFC7959] to transport CoAP messages in blocks thus avoiding
   (excessive) fragmentation of UDP datagrams.  The use of "Block" for
   the transfer of larger EST messages is specified in Section 5.5.
   Figure 1 below shows the layered EST-coaps architecture.

   +------------------------------------------------+
   |    EST request/response messages               |
   +------------------------------------------------+
   |    CoAP for message transfer and signalling    |
   +------------------------------------------------+
   |    DTLS for transport security                 |
   +------------------------------------------------+
   |    UDP for transport                           |
   +------------------------------------------------+

                    Figure 1: EST-coaps protocol layers

   The EST-coaps protocol design follows closely the EST design.  The
   actions supported by EST-coaps are identified by their message types:

   o  CA certificate retrieval, needed to receive the complete set of CA
      certificates.

   o  Simple enroll and reenroll, for CA to sign public client-identity
      key.

   o  Certificate Signing Request (CSR) Attributes request messages,
      informs the client of the fields to include in generated CSR.

   o  Server-side key generation messages, to provide a private client-
      identity key when the client choses for an external entity to
      generate its private key.

5.1.  Mandatory/optional EST Functions

   This specification contains a set of required-to-implement functions,
   optional functions, and not specified functions.  The latter ones are
   deemed too expensive for low-resource devices in payload and
   calculation times.

   Table 1 specifies the mandatory-to-implement or optional
   implementation of the est-coaps functions.




van der Stok, et al.      Expires July 4, 2019                  [Page 7]

Internet-Draft                  EST-coaps                  December 2018


              +------------------+--------------------------+
              | EST Functions    | EST-coaps implementation |
              +------------------+--------------------------+
              | /cacerts         | MUST                     |
              | /simpleenroll    | MUST                     |
              | /simplereenroll  | MUST                     |
              | /fullcmc         | Not specified            |
              | /serverkeygen    | OPTIONAL                 |
              | /csrattrs        | OPTIONAL                 |
              +------------------+--------------------------+

               Table 1: Table 1: List of EST-coaps fuctions

   While [RFC7030] permits a number of these functions to be used
   without authentication, this specification requires authentication
   for all functions.

5.2.  Payload format

   The content-format (media type equivalent) of the CoAP message
   determines which EST message is transported in the CoAP payload.  The
   media types specified in the HTTP Content-Type header (section 3.2.2
   of [RFC7030]) are in EST-coaps specified by the Content-Format Option
   (12) of CoAP.  The combination of URI path and content-format in EST-
   coaps MUST map to an allowed combination of URI and media type in
   EST.  The required content-formats for these requests and response
   messages are defined in Section 10.1.  The CoAP response codes are
   defined in Section 5.4.

   EST-coaps is designed for use between low-resource devices and hence
   does not need to send Base64-encoded data.  Simple binary is more
   efficient (30% smaller payload) and well supported by CoAP.  Thus,
   the payload for a given media type follows the ASN.1 structure of the
   media-type and is transported as straight binary.  Section 5.2.1
   specifies the payload structure when multiple media types are present
   in the payload.

5.2.1.  Content Format application/multipart-core

   A representation with content format ID 62 contains a collection of
   representations along with their respective content format.  The
   content-format identifies the media-type application/multipart-core
   specified in [I-D.ietf-core-multipart-ct].

   The collection is encoded as a CBOR array [RFC7049] with an even
   number of elements.  The second, fourth, sixth, etc. element is a
   binary string containing a representation.  The first, third, fifth,
   etc. element is an unsigned integer specifying the content format ID



van der Stok, et al.      Expires July 4, 2019                  [Page 8]

Internet-Draft                  EST-coaps                  December 2018


   of the consecutive representation.  For example, a collection
   containing two representations in response to a server-side key
   generation request, could include a private key in PKCS#8 [RFC5958]
   with content format ID 284 (0x011C) and a certificate with content
   format ID 281 (0x0119).  Such a collection would look like
   [284,h'0123456789abcdef', 281,h'fedcba9876543210'] in diagnostic CBOR
   notation.  The serialization of such CBOR content would be


      84                  # array(4)
      19 011C             # unsigned(284)
      48                  # bytes(8)
         0123456789ABCDEF # "\x01#Eg\x89\xAB\xCD\xEF"
      19 0119             # unsigned(281)
      48                  # bytes(8)
         FEDCBA9876543210 # "\xFE\xDC\xBA\x98vT2\x10"

                   Multipart /skg response serialization

   The PKCS#8 key and X.509 certificate representations are ASN.1
   encoded in binary format.  An example is shown in Appendix A.4.

   In cases where the private key is further encrypted with CMS (as
   explained in Section 5.7) the content format ID is 280 (0x0118).

5.3.  Message Bindings

   The general EST CoAP message characteristics are:

   o  All EST-coaps messages expect a response from the server, thus the
      client MUST send the requests over confirmable CON CoAP messages.

   o  The Ver, TKL, Token, and Message ID values of the CoAP header are
      not affected by EST.

   o  The CoAP options used are Uri-Host, Uri-Path, Uri-Port, Content-
      Format, and Location-Path.  These CoAP Options are used to
      communicate the HTTP fields specified in the EST REST messages.

   o  EST URLs are HTTPS based (https://), in CoAP these are assumed to
      be translated to coaps (coaps://)

   Appendix A includes some practical examples of EST messages
   translated to CoAP.







van der Stok, et al.      Expires July 4, 2019                  [Page 9]

Internet-Draft                  EST-coaps                  December 2018


5.4.  CoAP response codes

   Section 5.9 of [RFC7252] and Section 7 of [RFC8075] specify the
   mapping of HTTP response codes to CoAP response codes.  Every time
   the HTTP response code 200 is specified in [RFC7030] in response to a
   GET request (/cacerts, /csrattrs), in EST-coaps the equivalent CoAP
   response code 2.05 or 2.03 MUST be used.  Similarly, 2.01, 2.02 or
   2.04 MUST be used in response to HTTP POST EST requests
   (/simpleenroll, /simplereenroll, /serverkeygen ).  Response code HTTP
   202 Retry-After that existed in EST has no equivalent in CoAP.
   Section 5.6 specifies how EST requests over CoAP handle delayed
   messages.

   EST makes use of HTTP 204 and 404 responses when a resource is not
   available for the client.  The equivalent CoAP error code to use in
   an EST-coaps responses are 2.04 and 4.04.  Additionally, EST's HTTP
   401 error translates to 4.01 in EST-coaps.  Other EST HTTP error
   messages are 400, 423 and 503.  Their equivalent CoAP errors are
   4.00, 4.03 and 5.03 respectively.  In case a required COAP option
   (i.e Content-Format) is omitted, the server is expected to return a
   4.02.

5.5.  Message fragmentation

   DTLS defines fragmentation only for the handshake and not for secure
   data exchange (DTLS records).  [RFC6347] states that to avoid using
   IP fragmentation, which involves error-prone datagram reconstitution,
   invokers of the DTLS record layer SHOULD size DTLS records so that
   they fit within any Path MTU estimates obtained from the record
   layer.  In addition, invokers residing on a 6LoWPAN over IEEE
   802.15.4 [ieee802.15.4] network SHOULD attempt to size CoAP messages
   such that each DTLS record will fit within one or two IEEE 802.15.4
   frames.

   That is not always possible in EST-coaps.  Even though ECC
   certificates are small in size, they can vary greatly based on
   signature algorithms, key sizes, and OID fields used.  For 256-bit
   curves, common ECDSA cert sizes are 500-1000 bytes which could
   fluctuate further based on the algorithms, OIDs, SANs and cert
   fields.  For 384-bit curves, ECDSA certs increase in size and can
   sometimes reach 1.5KB.  Additionally, there are times when the EST
   cacerts response from the server can include multiple certs that
   amount to large payloads.  Section 4.6 of CoAP [RFC7252] describes
   the possible payload sizes: "if nothing is known about the size of
   the headers, good upper bounds are 1152 bytes for the message size
   and 1024 bytes for the payload size".  Section 4.6 of [RFC7252] also
   suggests that IPv4 implementations may want to limit themselves to
   more conservative IPv4 datagram sizes such as 576 bytes.  Even with



van der Stok, et al.      Expires July 4, 2019                 [Page 10]

Internet-Draft                  EST-coaps                  December 2018


   ECC certs, EST-coaps messages can still exceed MTU sizes on the
   Internet or 6LoWPAN [RFC4919] (Section 2 of [RFC7959]).  EST-coaps
   needs to be able to fragment messages into multiple DTLS datagrams.

   To perform fragmentation in CoAP, [RFC7959] specifies the "Block1"
   option for fragmentation of the request payload and the "Block2"
   option for fragmentation of the return payload of a CoAP flow.  As
   explained in Section 1 of [RFC7959], blockwise transfers SHOULD be
   used in Confirmable CoAP messages to avoid the exacerbation of lost
   blocks.  [RFC7959] defines SZX in the block option fields.  SZX is
   used to convey the size of the blocks in the requests or responses.
   The CoAP client MAY specify the Block1 size and MAY also specify the
   Block2 size.  The CoAP server MAY specify the Block2 size, but not
   the Block1 size.

   [RFC7959] also defines Size1 and Size2 options to provide size
   information about the resource representation in a request and
   response.  The Size1 response MAY be parsed by the client as a size
   indication of the Block2 resource in the server response or by the
   server as a request for a size estimate by the client.  Similarly,
   the Size2 option defined in BLOCK should be parsed by the server as
   an indication of the size of the resource carried in Block1 options
   and by the client as a maximum size expected in the 4.13 (Request
   Entity Too Large) response to a request.

   Examples of fragmented EST messages are shown in Appendix C.

5.6.  Delayed Responses

   Server responses can sometimes be delayed.  According to section
   5.2.2 of [RFC7252], a slow server can acknowledge the request with a
   2.31 code and respond later with the requested resource
   representation.  In particular, a slow server can respond to an
   enrollment request with an empty ACK with code 0.00, before sending
   the certificate to the server after a short delay.  If the
   certificate response is large, the server will need more than one
   "Block2" blocks to transfer it.  This situation is shown in Figure 2
   where a client sends an enrollment request that uses more than one
   "Block1" blocks.  The server uses an empty 0.00 ACK to announce the
   delayed response which is provided later with 2.04 messages
   containing "Block2" options.  Having received the first 256 bytes in
   the first "block2" block, the client asks for a block reduction to
   128 bytes in all following "block2" blocks, starting with the second
   block (NUM=1).







van der Stok, et al.      Expires July 4, 2019                 [Page 11]

Internet-Draft                  EST-coaps                  December 2018


   POST [2001:db8::2:1]:61616/est/sen (CON)(1:0/1/256) {CSR req} -->
          <-- (ACK) (1:0/1/256) (2.31 Continue)
   POST [2001:db8::2:1]:61616/est/sen (CON)(1:1/1/256) {CSR req} -->
          <-- (ACK) (1:1/1/256) (2.31 Continue)
                         .
                         .
                         .
   POST [2001:db8::2:1]:61616/est/sen (CON)(1:N1/0/256){CSR req} -->
          <-- (0.00 empty ACK)
                         |
          ...... short delay before certificate is ready ......
                         |
         <-- (CON) (1:N1/0/256)(2:0/1/256)(2.04 Changed) {Cert resp}
                                      (ACK)                     -->
   POST [2001:db8::2:1]:61616/est/sen (CON)(2:1/0/128)          -->
          <-- (ACK) (2:1/1/128) (2.04 Changed) {Cert resp}
                         .
                         .
                         .
   POST [2001:db8::2:1]:61616/est/sen (CON)(2:N2/0/128)          -->
          <-- (ACK) (2:N2/0/128) (2.04 Changed) {Cert resp}

               Figure 2: EST-COAP enrolment with short wait

   If the server is very slow (i.e. minutes) in providing the response
   (i.e. when a manual intervention is needed), the server SHOULD
   respond with an ACK containing response code 5.03 (Service
   unavailable) and a Max-Age option to indicate the time the client
   SHOULD wait to request the content later.  After a delay of Max-Age,
   the client SHOULD resend the identical CSR to the server.  As long as
   the server responds with response code 5.03 (Service Unavailable)
   with a Max-Age option, the client can resend the enrolment request
   until the server responds with the certificate or the client abandons
   for other reasons.

   To demonstrate this scenario, Figure 3 shows a client sending an
   enrolment request that uses more than one "Block1" blocks to send the
   CSR to the server.  The server needs more than one "Block2" blocks to
   respond, but also needs to take a long delay (minutes) to provide the
   response.  Consequently, the server uses a 5.03 ACK response with a
   Max-Age option.  The client waits for a period of Max-Age as many
   times as he receives the same 5.03 response and retransmits the
   enrollment request until he receives a certificate.  Note that in the
   example below the server asks for a decrease in the block size when
   acknowledging the first Block2.






van der Stok, et al.      Expires July 4, 2019                 [Page 12]

Internet-Draft                  EST-coaps                  December 2018


   POST [2001:db8::2:1]:61616/est/sen (CON)(1:0/1/256) {CSR req} -->
          <-- (ACK) (1:0/1/256) (2.31 Continue)
   POST [2001:db8::2:1]:61616/est/sen (CON)(1:1/1/256) {CSR req} -->
          <-- (ACK) (1:1/1/256) (2.31 Continue)
                         .
                         .
   POST [2001:db8::2:1]:61616/est/sen (CON)(1:N1/0/256){CSR req} -->
        <-- (ACK) (1:N1/0/256) (2:0/0/128) (5.03 Service Unavailable)
                                                            (Max-Age)
                         |
                         |
   Client tries one or more times after Max-Age with identical payload
                         |
                         |
   POST [2001:db8::2:1]:61616/est/sen (CON)(1:N1/0/256){CSR req} -->
        <-- (ACK) (1:N1/0/256) (2:0/1/128) (2.04 Changed){Cert resp}
   POST [2001:db8::2:1]:61616/est/sen (CON)(2:1/0/128)           -->
        <-- (ACK) (2:1/1/128) (2.04 Changed) {Cert resp}
                         .
                         .
                         .
   POST [2001:db8::2:1]:61616/est/sen (CON)(2:N2/0/128)          -->
          <-- (ACK) (2:N2/0/128) (2.04 Changed) {Cert resp}


                Figure 3: EST-COAP enrolment with long wait

5.7.  Server-side Key Generation

   Constrained devices sometimes do not have the necessary hardware to
   generate statistically random numbers for private keys and DTLS
   ephemeral keys.  Past experience has also shown that low-resource
   endpoints sometimes generate numbers which could allow someone to
   decrypt the communication or guess the private key and impersonate as
   the device [PsQs] [RSAorig].

   Additionally, random number key generation is costly, thus energy
   draining.  Even though the random numbers that constitute the
   identity/cert do not get generated often, an endpoint may not want to
   spend time and energy generating keypairs, and just ask for one from
   the server.

   In these scenarios, server-side key generation can be used.  The
   client asks for the server or proxy to generate the private key and
   the certificate which is transferred back to the client in the
   server-side key generation response.  In all respects, the server
   SHOULD treat the CSR as it would treat any enroll or re-enroll CSR;
   the only distinction here is that the server MUST ignore the public



van der Stok, et al.      Expires July 4, 2019                 [Page 13]

Internet-Draft                  EST-coaps                  December 2018


   key values and signature in the CSR.  These are included in the
   request only to allow re-use of existing codebases for generating and
   parsing such requests.

   [RFC7030] recommends the private key returned by the server to be
   encrypted.  This specification provides two methods to encrypt the
   generated key, symmetric and asymmetric.  The methods are signalled
   by the client by using the relevant attributes (SMIMECapabilities and
   DecryptKeyIdentifier or AsymmetricDecryptKeyIdentifier) in the CSR
   request.  The symmetric key or the asymmetric keypair establishment
   method is out of scope of this specification.

   The sever-side key generation response is returned using a CBOR array
   Section 5.2.1.  The certificate part exactly matches the response
   from an enrollment response.  The private key can be in unprotected
   PKCS#8 [RFC5958] format or protected inside of CMS SignedData.  The
   SignedData is signed by the party that generated the private key,
   which may or may not be the EST server or the EST CA.  The SignedData
   is further protected by placing it inside of a CMS EnvelopedData as
   explained in Section 4.4.2 of [RFC7030].  In summary, the symmetricly
   encrypted key is included in the encryptedKey attribute in a
   KEKRecipientInfo structure.  In the case where the asymmetric
   encryption key is suitable for transport key operations the generated
   private key is encrypted with a symmetric key which is encrypted by
   using the client defined (in the CSR) asymmetric public key and is
   carried in an encryptedKey attribute in a KeyTransRecipientInfo.
   Finally, if the asymmetric encryption key is suitable for key
   agreement, the generated private key is encrypted with a symmetric
   key which is encrypted by using the client defined (in the CSR)
   asymmetric public key and is carried in an recipientEncryptedKeys
   attribute in a KeyAgreeRecipientInfo.

   [RFC7030] recommends the use of additional encryption of the returned
   private key.  For the context of this specification, clients and
   servers that choose to support server-side key generation MUST
   support unprotected (PKCS#8) private keys.  Symmetric or asymmetric
   encryption of the private key (CMS EnvelopedData) SHOULD be supported
   for deployments where end-to-end encryption needs to be provided
   between the client and a server.  Such cases could include
   architectures where an entity between the client and the CA
   terminates the DTLS connection (Registrar in Figure 4).

5.8.  Deployment limits

   Although EST-coaps paves the way for the utilization of EST by
   constrained devices in constrained networks, some classes of devices
   [RFC7228] will not have enough resources to handle the large payloads
   that come with EST-coaps.  The specification of EST-coaps is intended



van der Stok, et al.      Expires July 4, 2019                 [Page 14]

Internet-Draft                  EST-coaps                  December 2018


   to ensure that EST works for networks of constrained devices that
   choose to limit their communications stack to UDP/DTLS/CoAP.  It is
   up to the network designer to decide which devices execute the EST
   protocol and which do not.

6.  Discovery and URIs

   EST-coaps is targeted for low-resource networks with small packets.
   Saving header space is important and short EST-coaps URIs are
   specified in this document.  These URIs are shorter than the ones in
   [RFC7030].  The EST-coaps resource path names are:

   coaps://example.com:<port>/.well-known/est/<short-est>
   coaps://example.com:<port>/.well-known/est/ArbitraryLabel/<short-est>

   The short-est strings are defined in Table 2.  The ArbitraryLabel
   Path-Segment, if used, SHOULD be of the shortest length possible
   (Sections 3.1 and 3.2.2 of [RFC7030].  Following [RFC7030] discovery
   is not needed when the client is preconfigured with the /.well-known/
   est server URI and the coaps port 5684.

   The EST-coaps server URIs, obtained through discovery of the EST-
   coaps root resource(s) as shown below, are of the form:

   coaps://example.com:<port>/<root-resource>/<short-est>
   coaps://example.com:<port>/<root-resource>/ArbitraryLabel/<short-est>

   Figure 5 in section 3.2.2 of [RFC7030] enumerates the operations and
   corresponding paths which are supported by EST.  Table 2 provides the
   mapping from the EST URI path to the shorter EST-coaps URI path.

                     +------------------+-----------+
                     | EST              | EST-coaps |
                     +------------------+-----------+
                     | /cacerts         | /crts     |
                     | /simpleenroll    | /sen      |
                     | /simplereenroll  | /sren     |
                     | /csrattrs        | /att      |
                     | /serverkeygen    | /skg      |
                     +------------------+-----------+

                Table 2: Table 2: Short EST-coaps URI path

   Clients and servers MUST support the short resource URIs.  The
   corresponding longer URIs from [RFC7030] MAY be supported.

   In the context of CoAP, the presence and location of (path to) the
   management data are discovered by sending a GET request to "/.well-



van der Stok, et al.      Expires July 4, 2019                 [Page 15]

Internet-Draft                  EST-coaps                  December 2018


   known/core" including a resource type (RT) parameter with the value
   "ace.est" [RFC6690].  Upon success, the return payload will contain
   the root resource of the EST resources.  The server MAY return all
   available resource paths and the used content types.  This is useful
   when multiple content types are supported by the EST-coaps server and
   optional functions are available.  The example below shows the
   discovery of the presence and location of EST-coaps resources.
   Linefeeds are included only for readability.

     REQ: GET /.well-known/core?rt=ace.est*

     RES: 2.05 Content
   </est>; rt="ace.est",
   </est/crts>;rt="ace.est.crts";ct=281,
   </est/sen>;rt="ace.est.sen";ct=281 286,
   </est/sren>;rt="ace.est.sren";ct=281 286,
   </est/att>;rt="ace.est.att";ct=285,
   </est/skg>;rt="ace.est.skg";ct=280 286 62

   The first line of the discovery response above MUST be included.  The
   five consecutive lines after the first MAY be included.  The return
   of the content-types allows the client to choose the most appropriate
   one from multiple content types.

   Port numbers, not returned in the example, are assumed to be the
   default numbers 5683 and 5684 for coap and coaps respectively
   (Sections 12.6 and 12.7 of [RFC7252]).  Discoverable port numbers MAY
   be returned in the <href> of the payload.

   It is up to the implementation to choose its root resource;
   throughout this document the example root resource /est is used.

7.  DTLS Transport Protocol

   EST-coaps depends on a secure transport mechanism over UDP that
   secures the exchanged CoAP messages.  DTLS is one such secure
   protocol.  Where TLS is used in the context of EST, it is understood
   that EST-coaps uses DTLS instead.  No other changes are necessary
   regarding the secure transport of EST messages (all provisional modes
   etc. are the same as in TLS).

   CoAP was designed to avoid fragmentation.  DTLS is used to secure
   CoAP messages.  However, fragmentation is still possible at the DTLS
   layer during the DTLS handshake when using ECC ciphersuites.  If
   fragmentation is necessary, "DTLS provides a mechanism for
   fragmenting a handshake message over several records, each of which
   can be transmitted separately, thus avoiding IP fragmentation"
   [RFC6347].



van der Stok, et al.      Expires July 4, 2019                 [Page 16]

Internet-Draft                  EST-coaps                  December 2018


   The DTLS handshake is authenticated by using certificates.  EST-coaps
   supports the certificate types and Trust Anchors (TA) that are
   specified for EST in Section 3 of [RFC7030].

   CoAP and DTLS can provide proof-of-identity for EST-coaps clients and
   servers with simple PKI messages as descrbed in Section 3.1 of
   [RFC5272].  Moreover, channel-binding information for linking proof-
   of-identity with connection-based proof-of-possession is OPTIONAL for
   EST-coaps.  When proof-of-possession is desired, a set of actions are
   required regarding the use of tls-unique, described in section 3.5 in
   [RFC7030].  The tls-unique information consists of the contents of
   the first "Finished" message in the (D)TLS handshake between server
   and client [RFC5929].  The client is supposed to add this "Finished"
   message as a ChallengePassword in the attributes section of the
   PKCS#10 Request [RFC5967] Info to prove that the client is indeed in
   control of the private key at the time of the (D)TLS session
   establishment.  In the case of EST-coaps, the same operations can be
   performed during the DTLS handshake.  For DTLS 1.2, in the event of
   handshake message fragmentation, the Hash of the handshake messages
   used in the MAC calculation of the Finished message MUST be computed
   as if each handshake message had been sent as a single fragment
   [RFC6347].  The Finished message is calculated as:

   PRF(master_secret, finished_label, Hash(handshake_messages))
      [0..verify_data_length-1];

   Similarly, for DTLS 1.3, the Finished message MUST be computed as if
   each handshake message had been sent as a single fragment following
   the algorithm described in 4.4.4 of [RFC8446].  The Finished message
   is calculated as:

   HMAC(finished_key,
       Transcript-Hash(Handshake Context,
       Certificate*, CertificateVerify*))

       * Only included if present.

   In a constrained CoAP environment, endpoints can't afford to
   establish a DTLS connection for every EST transaction.
   Authenticating and negotiating DTLS keys requires resources on low-
   end endpoints and consumes valuable bandwidth.  The DTLS connection
   SHOULD remain open for sequential EST transactions.  For example, an
   EST cacerts request that is followed by a simpleenroll request can
   use the same authenticated DTLS connection.  However, some additional
   security considerations apply regarding the use of the Implicit and
   Explicit TA database (Section 11.1)





van der Stok, et al.      Expires July 4, 2019                 [Page 17]

Internet-Draft                  EST-coaps                  December 2018


   Given that after a successful enrollment, it is more likely that a
   new EST transaction will take place after a significant amount of
   time, the DTLS connections SHOULD only be kept alive for EST messages
   that are relatively close to each other.  In some cases like NAT
   rebinding, keeping the state of a connection is not possible when
   devices sleep for extended periods of time.  In such occasions,
   [I-D.rescorla-tls-dtls-connection-id] negotiates a connection ID that
   can eliminate the need for new handshake and its additional cost.

8.  HTTPS-CoAPS Registrar

   In real-world deployments, the EST server will not always reside
   within the CoAP boundary.  The EST server can exist outside the
   constrained network that supports TLS/HTTP.  In such environments
   EST-coaps is used by the client within the CoAP boundary and TLS is
   used to transport the EST messages outside the CoAP boundary.  A
   Registrar at the edge is required to operate between the CoAP
   environment and the external HTTP network as shown in Figure 4.

                                        Constrained Network
   .------.                         .----------------------------.
   |  CA  |                         |.--------------------------.|
   '------'                         ||                          ||
      |                             ||                          ||
   .------.  HTTP   .-----------------.   CoAPS  .-----------.  ||
   | EST  |<------->|EST-coaps-to-HTTPS|<------->| EST Client|  ||
   |Server|over TLS |   Registrar     |          '-----------'  ||
   '------'         '-----------------'                         ||
                                    ||                          ||
                                    |'--------------------------'|
                                    '----------------------------'

       Figure 4: EST-coaps-to-HTTPS Registrar at the CoAP boundary.

   The EST-coaps-to-HTTPS Registrar MUST terminate EST-coaps downstream
   and initiate EST connections over TLS upstream.  The Registrar MUST
   authenticate and OPTIONALLY authorize the clients and it MUST be
   authenticated by the EST server or CA.  The trust relationship
   between the Registrar and the EST server SHOULD be pre-established
   for the Registrar to proxy these connections on behalf of various
   clients.

   When enforcing Proof-of-Possession (POP) linking, the DTLS tls-unique
   value of the (D)TLS session needs to be used to prove that the
   private key corresponding to the public key is in the possession of
   and was used to establish the connection by the client as explained
   in Section 7).  The POP linking information is lost between the EST-
   coaps client and the EST server when a Registrar is present.  The EST



van der Stok, et al.      Expires July 4, 2019                 [Page 18]

Internet-Draft                  EST-coaps                  December 2018


   server becomes aware of the presence of a Registrar from its TLS
   client certificate that includes id-kp-cmcRA [RFC6402] extended key
   usage extension (EKU).  As explained in Section 3.7 of [RFC7030], the
   EST server SHOULD apply an authorization policy consistent with a
   Registrar client.  For example, it could be configured to accept POP
   linking information that does not match the current TLS session
   because the authenticated EST client Registrar has verified this
   information when acting as an EST server.

   For some use cases, clients that leverage server-side key generation
   might prefer for the enrolled keys to be generated by the Registrar
   if the CA does not support server-side key generation.  In these
   cases the Registrar MUST support random number generation using
   proper entropy.  Such Registrar is responsible for generating a new
   CSR signed by a new key which will be returned to the client along
   with the certificate from the CA.

   Table 2 contains the URI mappings between EST-coaps and EST that the
   Registrar MUST adhere to.  Section 5.4 of this specification and
   Section 7 of [RFC8075] define the mappings between EST-coaps and HTTP
   response codes, that determine how the Registrar MUST translate CoAP
   response codes from/to HTTP status codes.  The mapping from CoAP
   Content-Type to HTTP Media-Type is defined in Section 10.1.
   Additionally, a conversion from CBOR major type 2 to Base64 encoding
   MUST take place at the Registrar when server-side key generation is
   supported.  If CMS end-to-end encryption is employed for the private
   key, the encrypted CMS EnvelopedData blob should be included in
   binary in CBOR type 2 downstream to the client.

   Due to fragmentation of large messages into blocks, an EST-coaps-to-
   HTTP Registrar MUST reassemble the BLOCKs before translating the
   binary content to Base64, and consecutively relay the message
   upstream.

   For the discovery of the EST server by the EST client in the CoAP
   environment, the EST-coaps-to-HTTP Registrar MUST announce itself
   according to the rules in Section 6.  The available actions of the
   Registrars MUST be announced with as many resource paths necessary.
   .

9.  Parameters

   This section addresses transmission parameters described in sections
   4.7 and 4.8 of [RFC7252].







van der Stok, et al.      Expires July 4, 2019                 [Page 19]

Internet-Draft                  EST-coaps                  December 2018


            ACK_TIMEOUT       | 2 seconds     |
            ACK_RANDOM_FACTOR | 1.5           |
            MAX_RETRANSMIT    | 4             |
            NSTART            | 1             |
            DEFAULT_LEISURE   | 5 seconds     |
            PROBING_RATE      | 1 byte/second |

   EST does not impose any unique parameters that affect the CoAP
   parameters But the CoAP ones could be affecting EST.  For example,
   the processing delay of CAs could be less then 2s, but in this case
   the EST-coaps server should be sending a CoAP ACK every 2s while
   processing.

   The main recommendation, based on experiments, is to follow the
   default CoAP configuration parameters.  However, depending on the
   implementation scenario, retransmissions and timeouts can also occur
   on other networking layers, governed by other configuration
   parameters.

   Some further comments about some specific parameters, mainly from
   Table 2 in [RFC7252]:

   o  NSTART: Limit the number of simultaneous outstanding interactions
      that a client maintains to a given server.  EST-coaps clients
      SHOULD use 1, which is the default.  A EST-coaps client is not
      expected to interact with more than one servers at the same time.

   o  DEFAULT_LEISURE: This setting is only relevant in multicast
      scenarios, outside the scope of EST-coaps.

   o  PROBING_RATE: A parameter which specifies the rate of re-sending
      non-confirmable messages.  The EST messages are defined to be sent
      as CoAP confirmable messages, hence this setting is not
      applicable.

   Finally, the Table 3 parameters in [RFC7252] are mainly derived from
   Table 2.  Directly changing parameters on one table would affect
   parameters on the other.

10.  IANA Considerations

10.1.  Content-Format Registry

   Additions to the sub-registry "CoAP Content-Formats", within the
   "CoRE Parameters" registry [COREparams] are specified in Table 3.
   These have been registered temporarily in the Expert Review range
   (0-255).




van der Stok, et al.      Expires July 4, 2019                 [Page 20]

Internet-Draft                  EST-coaps                  December 2018


   +-------------------------------+-----+-----------------------------+
   | HTTP Media-Type               |  ID | Reference                   |
   +-------------------------------+-----+-----------------------------+
   | application/pkcs7-mime;       | 280 | [I-D.ietf-lamps-rfc5751-bis |
   | smime-type=server-generated-  |     | ] [RFC7030]                 |
   | key                           |     |                             |
   | application/pkcs7-mime;       | 281 | [I-D.ietf-lamps-rfc5751-bis |
   | smime-type=certs-only         |     | ]                           |
   | application/pkcs7-mime;       | 282 | [I-D.ietf-lamps-rfc5751-bis |
   | smime-type=CMC-request        |     | ] [RFC5273]                 |
   | application/pkcs7-mime;       | 283 | [I-D.ietf-lamps-rfc5751-bis |
   | smime-type=CMC-response       |     | ] [RFC5273]                 |
   | application/pkcs8             | 284 | [I-D.ietf-lamps-rfc5751-bis |
   |                               |     | ] [RFC5958]                 |
   | application/csrattrs          | 285 | [RFC7030] [RFC7231]         |
   | application/pkcs10            | 286 | [I-D.ietf-lamps-rfc5751-bis |
   |                               |     | ] [RFC5967]                 |
   +-------------------------------+-----+-----------------------------+

                     Table 3: New CoAP Content-Formats

10.2.  Resource Type registry

   This memo registers a new Resource Type (rt=) Link Target Attributes
   in the "Resource Type (rt=) Link Target Attribute Values" subregistry
   under the "Constrained RESTful Environments (CoRE) Parameters"
   registry.

   o  rt="ace.est".  This EST resource is used to query and return the
      supported EST resources of a CoAP server.

   o  rt="ace.est.crts".  This resource depicts the support of EST get
      cacerts.

   o  rt="ace.est.sen".  This resource depicts the support of EST simple
      enroll.

   o  rt="ace.est.sren".  This resource depicts the support of EST
      simple reenroll.

   o  rt="ace.est.att".  This resource depicts the support of EST CSR
      attributes.

   o  rt="ace.est.skg".  This resource depicts the support of EST
      server-side key generation.






van der Stok, et al.      Expires July 4, 2019                 [Page 21]

Internet-Draft                  EST-coaps                  December 2018


11.  Security Considerations

11.1.  EST server considerations

   The security considerations of Section 6 of [RFC7030] are only
   partially valid for the purposes of this document.  As HTTP Basic
   Authentication is not supported, the considerations expressed for
   using passwords do not apply.

   Given that the client has only limited resources and may not be able
   to generate sufficiently random keys to encrypt its identity, it is
   possible that the client uses server generated private/public keys.
   The transport of these keys is inherently risky.  Analysis SHOULD be
   done to establish whether server side key generation enhances or
   decreases the probability of identity stealing.

   It is also RECOMMENDED that the Implicit Trust Anchor database used
   for EST server authentication be carefully managed to reduce the
   chance of a third-party CA with poor certification practices from
   being trusted.  Disabling the Implicit Trust Anchor database after
   successfully receiving the Distribution of CA certificates response
   (Section 4.1.3 of [RFC7030]) limits any risk to the first DTLS
   exchange.  Alternatively, in a persistent DTLS connection where a
   /sen request follows a /crt in the same connection, a client MAY
   choose to keep the connection already authenticated by the Implicit
   TA open for efficiency reasons (Section 7) by assuming that the
   identity of the server is to be trusted.  In that case then the
   Explicit TA MUST be used starting from the next DTLS connection.

   In cases where the IDevID used to authenticate the client is expired
   the server MAY still authenticate the client because IDevIDs are
   expected to live as long as the device itself (Section 4).  In such
   occasions, checking the certificate revocation status or authorizing
   the client using another method is important for the server to ensure
   that the client is to be trusted.

   In accordance with [RFC7030], TLS cipher suites that include
   "_EXPORT_" and "_DES_" in their names MUST NOT be used.  More
   information about recommendations of TLS and DTLS are included in
   [RFC7525].

   As described in CMC, Section 6.7 of [RFC5272], "For keys that can be
   used as signature keys, signing the certification request with the
   private key serves as a POP on that key pair".  The inclusion of tls-
   unique in the certificate request links the proof-of-possession to
   the TLS proof-of-identity.  This implies but does not prove that only
   the authenticated client currently has access to the private key.




van der Stok, et al.      Expires July 4, 2019                 [Page 22]

Internet-Draft                  EST-coaps                  December 2018


   Regarding the Certificate Signing Request (CSR), an adversary could
   exclude attributes that a server may want, include attributes that a
   server may not want, and render meaningless other attributes that a
   server may want.  The CA is expected to be able to enforce policies
   to recover from improper CSR requests.

   Interpreters of ASN.1 structures should be aware of the use of
   invalid ASN.1 length fields and should take appropriate measures to
   guard against buffer overflows, stack overruns in particular, and
   malicious content in general.

11.2.  HTTPS-CoAPS Registrar considerations

   The Registrar proposed in Section 8 must be deployed with care, and
   only when the recommended connections are impossible.  When POP
   linking is used the Registrar terminating the TLS connection
   establishes a new one with the upstream CA.  Thus, it is impossible
   for POP linking to be enforced end-to-end for the EST transaction.
   The EST server could be configured to accept POP linking information
   that does not match the current TLS session because the authenticated
   EST Registrar client has verified this information when acting as an
   EST server.

   The introduction of an EST-coaps-to-HTTP Registrar assumes the client
   can trust the registrar using its implicit or explicit TA database.
   It also assumes the Registrar has a trust relationship with the
   upstream EST server in order to act on behalf of the clients.  When a
   client uses the Implicit TA database for certificate validation, he
   SHOULD confirm if the server is acting as an RA by the presence of
   the id-kp-cmcRA [RFC6402] EKU in the server certificate.  If the
   server certificate does not include the EKU, it is RECOMMENDED that
   the client includes "Linking Identity and POP Information"
   (Section 7) in requests.

   In a server-side key generation case, if no end-to-end encryption is
   used, the Registrar may be able see the private key as it acts as a
   man-in-the-middle.  Thus, the client puts its trust on the Registrar
   not exposing the private key.

   Clients that leverage server-side key generation without end-to-end
   encryption of the private key (Section 5.7 have no knowledge if the
   Registrar will be generating the private key and enrolling the
   certificates with the CA or if the CA will be responsible for
   generating the key.  In such cases, the existence of a Registrar
   requires the client to put its trust on the registrar doing the right
   thing if it is generating the private key.





van der Stok, et al.      Expires July 4, 2019                 [Page 23]

Internet-Draft                  EST-coaps                  December 2018


12.  Contributors

   Martin Furuhed contributed to the EST-coaps specification by
   providing feedback based on the Nexus EST over CoAPs server
   implementation that started in 2015.  Sandeep Kumar kick-started this
   specification and was instrumental in drawing attention to the
   importance of the subject.

13.  Acknowledgements

   The authors are very grateful to Klaus Hartke for his detailed
   explanations on the use of Block with DTLS and his support for the
   content-format specification.  The authors would like to thank Esko
   Dijk and Michael Verschoor for the valuable discussions that helped
   in shaping the solution.  They would also like to thank Peter
   Panburana for his feedback on technical details of the solution.
   Constructive comments were received from Benjamin Kaduk, Eliot Lear,
   Jim Schaad, Hannes Tschofenig, Julien Vermillard, John Manuel, Oliver
   Pfaff and Pete Beal.

   Interop tests were done by Oliver Pfaff, Thomas Werner, Oskar
   Camezind, Bjorn Elmers and Joel Hoglund.

   Robert Moskowitz provided the technology to make the examples.

14.  References

14.1.  Normative References

   [I-D.ietf-core-multipart-ct]
              Fossati, T., Hartke, K., and C. Bormann, "Multipart
              Content-Format for CoAP", draft-ietf-core-multipart-ct-02
              (work in progress), August 2018.

   [I-D.ietf-tls-dtls13]
              Rescorla, E., Tschofenig, H., and N. Modadugu, "The
              Datagram Transport Layer Security (DTLS) Protocol Version
              1.3", draft-ietf-tls-dtls13-30 (work in progress),
              November 2018.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC5967]  Turner, S., "The application/pkcs10 Media Type", RFC 5967,
              DOI 10.17487/RFC5967, August 2010,
              <https://www.rfc-editor.org/info/rfc5967>.



van der Stok, et al.      Expires July 4, 2019                 [Page 24]

Internet-Draft                  EST-coaps                  December 2018


   [RFC6347]  Rescorla, E. and N. Modadugu, "Datagram Transport Layer
              Security Version 1.2", RFC 6347, DOI 10.17487/RFC6347,
              January 2012, <https://www.rfc-editor.org/info/rfc6347>.

   [RFC6690]  Shelby, Z., "Constrained RESTful Environments (CoRE) Link
              Format", RFC 6690, DOI 10.17487/RFC6690, August 2012,
              <https://www.rfc-editor.org/info/rfc6690>.

   [RFC7030]  Pritikin, M., Ed., Yee, P., Ed., and D. Harkins, Ed.,
              "Enrollment over Secure Transport", RFC 7030,
              DOI 10.17487/RFC7030, October 2013,
              <https://www.rfc-editor.org/info/rfc7030>.

   [RFC7049]  Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", RFC 7049, DOI 10.17487/RFC7049,
              October 2013, <https://www.rfc-editor.org/info/rfc7049>.

   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, "The Constrained
              Application Protocol (CoAP)", RFC 7252,
              DOI 10.17487/RFC7252, June 2014,
              <https://www.rfc-editor.org/info/rfc7252>.

   [RFC7959]  Bormann, C. and Z. Shelby, Ed., "Block-Wise Transfers in
              the Constrained Application Protocol (CoAP)", RFC 7959,
              DOI 10.17487/RFC7959, August 2016,
              <https://www.rfc-editor.org/info/rfc7959>.

   [RFC8075]  Castellani, A., Loreto, S., Rahman, A., Fossati, T., and
              E. Dijk, "Guidelines for Mapping Implementations: HTTP to
              the Constrained Application Protocol (CoAP)", RFC 8075,
              DOI 10.17487/RFC8075, February 2017,
              <https://www.rfc-editor.org/info/rfc8075>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

14.2.  Informative References

   [COREparams]
              IANA, "Constrained RESTful Environments (CoRE)
              Parameters", <https://www.iana.org/assignments/core-
              parameters/core-parameters.xhtml>.








van der Stok, et al.      Expires July 4, 2019                 [Page 25]

Internet-Draft                  EST-coaps                  December 2018


   [I-D.ietf-lamps-rfc5751-bis]
              Schaad, J., Ramsdell, B., and S. Turner, "Secure/
              Multipurpose Internet Mail Extensions (S/MIME) Version 4.0
              Message Specification", draft-ietf-lamps-rfc5751-bis-12
              (work in progress), September 2018.

   [I-D.rescorla-tls-dtls-connection-id]
              Rescorla, E., Tschofenig, H., Fossati, T., and T. Gondrom,
              "The Datagram Transport Layer Security (DTLS) Connection
              Identifier", draft-rescorla-tls-dtls-connection-id-02
              (work in progress), November 2017.

   [ieee802.15.4]
              Institute of Electrical and Electronics Engineers, "IEEE
              Standard 802.15.4-2006", 2006.

   [ieee802.1ar]
              Institute of Electrical and Electronics Engineers, "IEEE
              802.1AR Secure Device Identifier", December 2009.

   [PsQs]     Nadia Heninger, Zakir Durumeric, Eric Wustrow, J. Alex
              Halderman, "Mining Your Ps and Qs: Detection of Widespread
              Weak Keys in Network Devices", USENIX Security Symposium
              2012 ISBN 978-931971-95-9, August 2012.

   [RFC4919]  Kushalnagar, N., Montenegro, G., and C. Schumacher, "IPv6
              over Low-Power Wireless Personal Area Networks (6LoWPANs):
              Overview, Assumptions, Problem Statement, and Goals",
              RFC 4919, DOI 10.17487/RFC4919, August 2007,
              <https://www.rfc-editor.org/info/rfc4919>.

   [RFC5272]  Schaad, J. and M. Myers, "Certificate Management over CMS
              (CMC)", RFC 5272, DOI 10.17487/RFC5272, June 2008,
              <https://www.rfc-editor.org/info/rfc5272>.

   [RFC5273]  Schaad, J. and M. Myers, "Certificate Management over CMS
              (CMC): Transport Protocols", RFC 5273,
              DOI 10.17487/RFC5273, June 2008,
              <https://www.rfc-editor.org/info/rfc5273>.

   [RFC5929]  Altman, J., Williams, N., and L. Zhu, "Channel Bindings
              for TLS", RFC 5929, DOI 10.17487/RFC5929, July 2010,
              <https://www.rfc-editor.org/info/rfc5929>.

   [RFC5958]  Turner, S., "Asymmetric Key Packages", RFC 5958,
              DOI 10.17487/RFC5958, August 2010,
              <https://www.rfc-editor.org/info/rfc5958>.




van der Stok, et al.      Expires July 4, 2019                 [Page 26]

Internet-Draft                  EST-coaps                  December 2018


   [RFC6090]  McGrew, D., Igoe, K., and M. Salter, "Fundamental Elliptic
              Curve Cryptography Algorithms", RFC 6090,
              DOI 10.17487/RFC6090, February 2011,
              <https://www.rfc-editor.org/info/rfc6090>.

   [RFC6402]  Schaad, J., "Certificate Management over CMS (CMC)
              Updates", RFC 6402, DOI 10.17487/RFC6402, November 2011,
              <https://www.rfc-editor.org/info/rfc6402>.

   [RFC7228]  Bormann, C., Ersue, M., and A. Keranen, "Terminology for
              Constrained-Node Networks", RFC 7228,
              DOI 10.17487/RFC7228, May 2014,
              <https://www.rfc-editor.org/info/rfc7228>.

   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <https://www.rfc-editor.org/info/rfc7230>.

   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014,
              <https://www.rfc-editor.org/info/rfc7231>.

   [RFC7251]  McGrew, D., Bailey, D., Campagna, M., and R. Dugal, "AES-
              CCM Elliptic Curve Cryptography (ECC) Cipher Suites for
              TLS", RFC 7251, DOI 10.17487/RFC7251, June 2014,
              <https://www.rfc-editor.org/info/rfc7251>.

   [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,
              "Recommendations for Secure Use of Transport Layer
              Security (TLS) and Datagram Transport Layer Security
              (DTLS)", BCP 195, RFC 7525, DOI 10.17487/RFC7525, May
              2015, <https://www.rfc-editor.org/info/rfc7525>.

   [RFC7925]  Tschofenig, H., Ed. and T. Fossati, "Transport Layer
              Security (TLS) / Datagram Transport Layer Security (DTLS)
              Profiles for the Internet of Things", RFC 7925,
              DOI 10.17487/RFC7925, July 2016,
              <https://www.rfc-editor.org/info/rfc7925>.

   [RFC8422]  Nir, Y., Josefsson, S., and M. Pegourie-Gonnard, "Elliptic
              Curve Cryptography (ECC) Cipher Suites for Transport Layer
              Security (TLS) Versions 1.2 and Earlier", RFC 8422,
              DOI 10.17487/RFC8422, August 2018,
              <https://www.rfc-editor.org/info/rfc8422>.





van der Stok, et al.      Expires July 4, 2019                 [Page 27]

Internet-Draft                  EST-coaps                  December 2018


   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/info/rfc8446>.

   [RSAorig]  Petr Svenda, Matus Nemec, Peter Sekan, Rudolf Kvasnovsky,
              David Formanek, David Komarek, Vashek Matyas, "The
              Million-Key Question - Investigating the Origins of RSA
              Public Keys", USENIX Security Symposium 2016 ISBN
              978-1-931971-32-4, August 2016.

Appendix A.  EST messages to EST-coaps

   This section shows the same examples as the ones presented in
   Appendix A of [RFC7030].  The payloads in the examples are the hex
   encoded binary, generated with "xxd - p file", of the files created
   following the specifications presented in I-D.draft-moskowitz-ecdsa-
   pki.  The shown payloads are not encrypted with DTLS.  In particular,
   the shell scripts from section 4.2 (create root certificate), section
   6.2 (Create the 802.1AR intermediate certificate) and section 6.3
   (Create an 802.1AR IdevID certificate) have been used.  The 802.1AR
   IdevID certificate is signed by the 802.1AR intermediate certificate
   that is signed by the auto-signed root certificate.

   The disassemblies of the payloads are presented in Appendix B.

   The corresponding CoAP headers are only shown in Appendix A.1.
   Creating CoAP headers is assumed to be generally known.

   These examples assume that the resource discovery, returned a short
   base path of "/est".

A.1.  cacerts

   In EST-coaps, a coaps cacerts message can be:

   GET coaps://192.0.2.1:8085/est/crts

   The corresponding CoAP header fields are shown below.  The use of
   block and DTLS are worked out in Appendix C.












van der Stok, et al.      Expires July 4, 2019                 [Page 28]

Internet-Draft                  EST-coaps                  December 2018


     Ver = 1
     T = 0 (CON)
     Code = 0x01 (0.01 is GET)
     Token = 0x9a (client generated)
     Options
      Option           [optional]
        Option Delta = 0x3  (option# 3 Uri-Host)
        Option Length = 0x9
        Option Value = 192.0.2.1
      Option           [optional]
        Option Delta = 0x4  (option# 3+4=7 Uri-Port)
        Option Length = 0x4
        Option Value = 8085
      Option
        Option Delta = 0x4   (option# 7+4=11 Uri-Path)
        Option Length = 0x5
        Option Value = "est"
      Option
        Option Delta = 0x0   (option# 11+0=11 Uri-Path)
        Option Length = 0x6
        Option Value = "crts"
      Option
        Option Delta = 0x3   (option# 11+3=14 Max-Age)
        Option Length = 0x1
        Option Value = 0x1    (1 minute)
     Payload = [Empty]

   A 2.05 Content response with a cert in EST-coaps will then be

   2.05 Content (Content-Format: 281)
      {payload with certificate in binary format}

   with CoAP fields


     Ver = 1
     T = 2 (ACK)
     Code = 0x45 (2.05 Content)
     Token = 0x9a   (copied from request by server)
     Options
       Option
         Option Delta = 0xC  (option# 12 Content-Format)
         Option Length = 0x2
         Option Value = 281

     Payload =
   2d2d2d2d2d424547494e20504b4353372d2d2d2d2d0a4d4949457741594a
   4b6f5a496876634e415163436f49494573544343424b3043415145784144



van der Stok, et al.      Expires July 4, 2019                 [Page 29]

Internet-Draft                  EST-coaps                  December 2018


   414c42676b71686b69473977304242774767676753544d4949430a516a43
   434165696741774942416749494430796b6e3052497a334177436759494b
   6f5a497a6a3045417749775a7a454c4d416b474131554542684d4356564d
   780a437a414a42674e564241674d416b4e424d5173774351594456515148
   44414a4d515445554d424947413155454367774c52586868625842735a53
   424a626d4d780a466a415542674e564241734d44574e6c636e52705a6d6c
   6a59585270623234784544414f42674e5642414d4d42314a766233516751
   3045774868634e4d5467780a4d6a4d774d544d314e44457a5768634e4d6a
   67784d6a49334d544d314e44457a576a42644d5173774351594456515147
   45774a56557a454c4d416b47413155450a43417743513045784644415342
   674e5642416f4d4330563459573177624755675357356a4d525977464159
   445651514c4441316a5a584a3061575a70593246300a615739754d524d77
   455159445651514444416f344d4449754d55465349454e424d466b774577
   59484b6f5a497a6a3043415159494b6f5a497a6a3044415163440a516741
   456e484e74356e5874324d7958734a7071796a6777572f55667a744f5738
   363837484f79755a2b547870347952442b426e3878644b6f6f7869777637
   530a672f4967634c4c6c657265436179377677675a303644766346364f42
   687a43426844416442674e56485134454667515555367937506d362f4331
   31526a754a540a7644623034572b35574a3077487759445652306a424267
   77466f41554258612f6f61476d6f41336752416453544f4c6f584b6a4635
   70307745675944565230540a4151482f42416777426745422f7749424154
   414f42674e56485138424166384542414d43415159774867594456523052
   42426377465945545932567964476c6d0a6555426c654746746347786c4c
   6d4e766254414b42676771686b6a4f5051514441674e4941444246416942
   70592f77557230676737342b736833504f486e69700a594c4a57445a635a
   4d786f315654717065512b324e774968414b572b75467150544479653379
   58484275496d436c645731354561775a70454648747a473672670a467479
   374d4949435354434341664367417749424167494a414f666e5249463148
   4d43764d416f4743437147534d343942414d434d476378437a414a42674e
   560a42415954416c56544d517377435159445651514944414a445154454c
   4d416b474131554542777743544545784644415342674e5642416f4d4330
   5634595731770a624755675357356a4d525977464159445651514c444131
   6a5a584a3061575a7059324630615739754d524177446759445651514444
   4164536232393049454e420a4d423458445445344d54497a4d44457a4e54
   4d314e6c6f5844544d344d5449794e54457a4e544d314e6c6f775a7a454c
   4d416b474131554542684d4356564d780a437a414a42674e564241674d41
   6b4e424d517377435159445651514844414a4d515445554d424947413155
   454367774c52586868625842735a53424a626d4d780a466a415542674e56
   4241734d44574e6c636e52705a6d6c6a59585270623234784544414f4267
   4e5642414d4d42314a76623351675130457757544154426763710a686b6a
   4f5051494242676771686b6a4f50514d4242774e43414153496f69435753
   564f68765956692b526348363675344f732b327a4f395a62757a5a76686f
   770a565a43647a34655353394e52382b535275505244385149555930572b
   4975693133626a77556c41587a747947746473616f3447454d4947424d42
   3047413155640a446751574242514664722b686f6161674465424542314a
   4d34756863714d586d6e54416642674e5648534d45474441576742514664
   722b686f616167446542450a42314a4d34756863714d586d6e5441504267
   4e5648524d4241663845425441444151482f4d4134474131556444774542



van der Stok, et al.      Expires July 4, 2019                 [Page 30]

Internet-Draft                  EST-coaps                  December 2018


   2f77514541774942426a416542674e560a48524545467a415667524e6a5a
   584a3061575a35514756345957317762475575593239744d416f47434371
   47534d343942414d43413063414d4551434947714a0a4e5a553039317053
   6574334458394d6b50787341567875766b674570556b527a44514c657467
   4b3641694168635673714f697a757633554331686572567057530a6b647a
   306c4d43536e30766c4e65435934366473326145414d51413d0a2d2d2d2d
   2d454e4420504b4353372d2d2d2d2d0a

   The disassembly of the payload is shown in Appendix B.1.

A.2.  csrattrs

   In the following csrattrs exchange, the CoAP GET request looks like

   REQ:
   GET coaps://[2001:db8::2:1]:61616/est/att
   (Content-Format: 285)

   307c06072b06010101011630220603883701311b131950617273652053455
   420617320322e3939392e31206461746106092a864886f70d010907302c06
   0388370231250603883703060388370413195061727365205345542061732
   0322e3939392e32206461746106092b240303020801010b06096086480165
   03040202

   A 2.05 Content response should contain attributes which are relevant
   for the authenticated client.  This example is copied from section
   A.2 in [RFC7030], where the base64 representation is replaced with a
   hexadecimal representation of the binary payload.  The EST-coaps
   server returns two attributes that the client can ignore when they
   are unknown to him.

A.3.  enroll / reenroll

   During the (re-)enroll exchange the EST-coaps client uses a CSR
   (Content-Format 286) request in the POST request payload.
















van der Stok, et al.      Expires July 4, 2019                 [Page 31]

Internet-Draft                  EST-coaps                  December 2018


   POST [2001:db8::2:1]:61616/est/sen
   (token 0x45)
   (Content-Format: 286)
   3082016f308201150201003076310b3009060355040613025553310b3009
   06035504080c0243413111300f06035504070c084f616b205061726b3114
   3012060355040a0c0b6578616d706c6520496e63310c300a060355040b0c
   03496f543112301006035504030c09436c69656e74205241310f300d0603
   55040513065774313233343059301306072a8648ce3d020106082a8648ce
   3d03010703420004835f89726506f0d586f8db511d945b4880ecb8d15ee9
   707893944b6ca7e247e753fd9d82c8bf8f353003327ee51f9b033330bc20
   6999fff6e62cc8119c405a31a03d303b06092a864886f70d01090e312e30
   2c302a0603551d1104233021a01f06082b06010505070804a01330110609
   2b06010401b43b0a01040401020304300a06082a8648ce3d040302034800
   3045022025084bf66faa41504bcb83f6aeca0e95d941a8a250f86e6300da
   9501992c878b02210082c2ff4ef22c60d2f7e52f9095b8381a25200fdc87
   f90aef577cb00d43224833

   After verification of the CSR by the server, a 2.01 Content response
   with the issued certificate will be returned to the client.  As
   described in Section 5.6, if the server is not able to provide a
   response immediately, it sends an empty ACK with response code 5.03
   (Service Unavailable) and the Max-Age option.  See Figure 3 for an
   example exchange.

   [EDNOTE: to include ChallengePassword.]


























van der Stok, et al.      Expires July 4, 2019                 [Page 32]

Internet-Draft                  EST-coaps                  December 2018


   RET:
   (Content-Format: 281)(token =0x45)
   2.01 Created
   2d2d2d2d2d424547494e20504b4353372d2d2d2d2d0a4d4949436951594a
   4b6f5a496876634e415163436f494943656a4343416e5943415145784144
   414c42676b71686b6947397730424277476767674a634d4949430a574443
   4341663267417749424167494a414b6667736d4479476f554a4d416f4743
   437147534d343942414d434d463078437a414a42674e5642415954416c56
   540a4d517377435159445651514944414a44515445554d42494741315545
   4367774c52586868625842735a53424a626d4d78466a415542674e564241
   734d44574e6c0a636e52705a6d6c6a5958527062323478457a415242674e
   5642414d4d436a67774d69347851564967513045774942634e4d5467784d
   6a4d774d544d314e444d780a576867504f546b354f5445794d7a45794d7a
   55354e546c614d485978437a414a42674e5642415954416c56544d517377
   435159445651514944414a44515445520a4d413847413155454277774954
   32467249464268636d73784644415342674e5642416f4d43325634595731
   77624755675357356a4d517777436759445651514c0a44414e4a62315178
   456a415142674e5642414d4d43554e736157567564434253515445504d41
   30474131554542524d47563351784d6a4d304d466b77457759480a4b6f5a
   497a6a3043415159494b6f5a497a6a3044415163445167414567312b4a63
   6d5547384e57472b4e7452485a526253494473754e4665365842346b3552
   4c0a624b6669522b64542f5a3243794c2b504e5441444d6e376c48357344
   4d7a433849476d5a2f2f626d4c4d67526e4542614d614f42696a4342687a
   414a42674e560a48524d45416a41414d4230474131556444675157424252
   3768735069476868793355686d61732b6c6f5369714c4339354d54416642
   674e5648534d45474441570a67425254724c732b6272384c5856474f346c
   4f384e76546862376c596e54414f42674e56485138424166384542414d43
   426141774b6759445652305242434d770a49614166426767724267454642
   516349424b41544d42454743537347415151427444734b41515145415149
   444244414b42676771686b6a4f5051514441674e4a0a4144424741694541
   685a424e6a7a736a53316475745438413854454168687659504c71787330
   754b4f766571354b7742526249434951435374793569426f75470a52502b
   51534131716242753831466b6d346a682f33336379376d33616e35363349
   7145414d51413d0a2d2d2d2d2d454e4420504b4353372d2d2d2d2d0a

   The disassembly of the payload is shown in Appendix B.2.

A.4.  serverkeygen

   In a serverkeygen exchange the CoAP GET request looks like











van der Stok, et al.      Expires July 4, 2019                 [Page 33]

Internet-Draft                  EST-coaps                  December 2018


   POST coaps://192.0.2.1:8085/est/skg
   (token 0xa5)
   (Content-Format: 286)(Max-Age=120)
   3081d5307c020100301a310b3009060355040613025553310b3009060355
   04080c024c413059301306072a8648ce3d020106082a8648ce3d03010703
   420004835f89726506f0d586f8db511d945b4880ecb8d15ee9707893944b
   6ca7e247e753fd9d82c8bf8f353003327ee51f9b033330bc206999fff6e6
   2cc8119c405a31a000300a06082a8648ce3d0403020349003046022100bf
   562cf8178654187284e2d0c3a01b760748d6be80d54c49d3986a17d0197f
   cc022100e34e6cd8c20e3ea5388a69d52fa814795eb8ae1bca099b3d5ae5
   1a77e79bd9a5

   The disassembly of this request is shown in Appendix B.3

   The response would follow [I-D.ietf-core-multipart-ct] and could
   looke like



































van der Stok, et al.      Expires July 4, 2019                 [Page 34]

Internet-Draft                  EST-coaps                  December 2018


   RET:
   2.01 Content (Content-Format: 62)
   (token=0xa5)
   84                                # array(4)
   19 011C                              # unsigned(284)
   58 F1                                # bytes(241)
   2d2d2d2d2d424547494e2050524956415445204b45592d2d2d2d2d0a4d49
   4748416745414d424d4742797147534d34394167454743437147534d3439
   417745484247307761774942415151672b742f377a70785067324172424f
   6c680a61744a33772b516e4e2f5970625345656b7735777649663477362b
   6852414e434141534458346c795a51627731596234323145646c46744967
   4f7934305637700a634869546c457473702b4a48353150396e594c497634
   38314d414d79667555666d774d7a4d4c7767615a6e2f3975597379424763
   51466f780a2d2d2d2d2d454e442050524956415445204b45592d2d2d2d2d
   0a
   19 0119                          # unsigned(281)
   59 0273                          # bytes(627)
   2d2d2d2d2d424547494e20504b4353372d2d2d2d2d0a4d4949427177594a
   4b6f5a496876634e415163436f4949426e444343415a6743415145784144
   414c42676b71686b694739773042427747676767462b4d4949420a656a43
   4341534767417749424167494a4150766369393676765864304d416f4743
   437147534d343942414d434d426f78437a414a42674e5642415954416c56
   540a4d517377435159445651514944414a4451544165467730784f444579
   4d7a45774f4449344e4456614677307a4f4445794d6a59774f4449344e44
   56614d426f780a437a414a42674e5642415954416c56544d517377435159
   445651514944414a445154425a4d424d4742797147534d34394167454743
   437147534d3439417745480a4130494142494e6669584a6c427644566876
   6a625552325557306941374c6a5258756c77654a4f555332796e346b666e
   552f32646773692f6a7a5577417a4a2b0a35522b62417a4d77764342706d
   662f3235697a49455a7841576a476a5544424f4d42304741315564446751
   574242523768735069476868793355686d61732b6c0a6f5369714c433935
   4d54416642674e5648534d45474441576742523768735069476868793355
   686d61732b6c6f5369714c4339354d54414d42674e5648524d450a425441
   444151482f4d416f4743437147534d343942414d43413063414d45514349
   484878334f49456d372b2f47414b764e7635747a7530306a614569346c36
   4d0a656548476f656f58504b71714169426b4b44486e68736a316e537566
   4130763664474130315233464f543433542f67654c6b2f50652b37584e61
   45414d51413d0a2d2d2d2d2d454e4420504b4353372d2d2d2d2d0a

Appendix B.  Disassembly Examples

   The subsections present the disassembly of the hexadecimal dumps of
   the payloads shown in Appendix A.








van der Stok, et al.      Expires July 4, 2019                 [Page 35]

Internet-Draft                  EST-coaps                  December 2018


B.1.  cacerts payload disassembly

   Disassembly of pkcs7 response payload containing a chain of two
   certificates.

  Certificate:
      Data:
          Version: 3 (0x2)
          Serial Number: 1102437012751306608 (0xf4ca49f4448cf70)
      Signature Algorithm: ecdsa-with-SHA256
          Issuer: C=US, ST=CA, L=LA, O=Example Inc, OU=certification,
                  CN=Root CA
          Validity
              Not Before: Dec 30 13:54:13 2018 GMT
              Not After : Dec 27 13:54:13 2028 GMT
          Subject: C=US, ST=CA, O=Example Inc, OU=certification,
                   CN=802.1AR CA
          Subject Public Key Info:
              Public Key Algorithm: id-ecPublicKey
                  Public-Key: (256 bit)
                  pub:
                      04:9c:73:6d:e6:75:ed:d8:cc:97:b0:9a:6a:ca:38:
                      30:5b:f5:1f:ce:d3:96:f3:af:3b:1c:ec:ae:67:e4:
                      f1:a7:8c:91:0f:e0:67:f3:17:4a:a2:8c:62:c2:fe:
                      d2:83:f2:20:70:b2:e5:7a:b7:82:6b:2e:ef:c2:06:
                      74:e8:3b:dc:17
                  ASN1 OID: prime256v1
                  NIST CURVE: P-256
          X509v3 extensions:
              X509v3 Subject Key Identifier:
                53:AC:BB:3E:6E:BF:0B:5D:51:8E:E2:53:BC:36:F4:E1:6F:B9:
  58:9D
              X509v3 Authority Key Identifier:
                  keyid:05:76:BF:A1:A1:A6:A0:0D:E0:44:07:52:4C:E2:E8:5C:
  A8:C5:E6:9D

              X509v3 Basic Constraints: critical
                  CA:TRUE, pathlen:1
              X509v3 Key Usage: critical
                  Certificate Sign, CRL Sign
              X509v3 Subject Alternative Name:
                  email:certify@example.com
      Signature Algorithm: ecdsa-with-SHA256
           30:45:02:20:69:63:fc:14:af:48:20:ef:8f:ac:87:73:ce:1e:
           78:a9:60:b2:56:0d:97:19:33:1a:35:55:3a:a9:79:0f:b6:37:
           02:21:00:a5:be:b8:5a:8f:4c:3c:9e:df:25:c7:06:e2:26:0a:
           57:56:d7:91:1a:c1:9a:44:14:7b:73:1b:aa:e0:16:dc:bb




van der Stok, et al.      Expires July 4, 2019                 [Page 36]

Internet-Draft                  EST-coaps                  December 2018


  Certificate:
      Data:
          Version: 3 (0x2)
          Serial Number:
              e7:e7:44:81:75:1c:c0:af
      Signature Algorithm: ecdsa-with-SHA256
          Issuer: C=US, ST=CA, L=LA, O=Example Inc, OU=certification,
                  CN=Root CA
          Validity
              Not Before: Dec 30 13:53:56 2018 GMT
              Not After : Dec 25 13:53:56 2038 GMT
          Subject: C=US, ST=CA, L=LA, O=Example Inc,
           OU=certification, CN=Root CA
          Subject Public Key Info:
              Public Key Algorithm: id-ecPublicKey
                  Public-Key: (256 bit)
                  pub:
                      04:88:a2:20:96:49:53:a1:bd:85:62:f9:17:07:eb:
                      ab:b8:3a:cf:b6:cc:ef:59:6e:ec:d9:be:1a:30:55:
                      90:9d:cf:87:92:4b:d3:51:f3:e4:91:b8:f4:43:f1:
                      02:14:63:45:be:22:e8:b5:dd:b8:f0:52:50:17:ce:
                      dc:86:b5:db:1a
                  ASN1 OID: prime256v1
                  NIST CURVE: P-256
          X509v3 extensions:
              X509v3 Subject Key Identifier:
  05:76:BF:A1:A1:A6:A0:0D:E0:44:07:52:4C:E2:E8:5C:A8:C5:E6:9D
              X509v3 Authority Key Identifier:
                  keyid:
  05:76:BF:A1:A1:A6:A0:0D:E0:44:07:52:4C:E2:E8:5C:A8:C5:E6:9D

              X509v3 Basic Constraints: critical
                  CA:TRUE
              X509v3 Key Usage: critical
                  Certificate Sign, CRL Sign
              X509v3 Subject Alternative Name:
                  email:certify@example.com
      Signature Algorithm: ecdsa-with-SHA256
           30:44:02:20:6a:89:35:95:34:f7:5a:52:7a:dd:c3:5f:d3:24:
           3f:1b:00:57:1b:af:92:01:29:52:44:73:0d:02:de:b6:02:ba:
           02:20:21:71:5b:2a:3a:2c:ee:bf:75:02:d6:17:ab:56:95:92:
           91:dc:f4:94:c0:92:9f:4b:e5:35:e0:98:e3:a7:6c:d9

B.2.  Re-enroll payload disassemblies

   Disassembly of pkcs10 request payload.





van der Stok, et al.      Expires July 4, 2019                 [Page 37]

Internet-Draft                  EST-coaps                  December 2018


   Certificate Request:
       Data:
           Version: 0 (0x0)
           Subject: C=US, ST=CA, L=Oak Park, O=,
          OU=IoT, CN=Client RA/serialNumber=Wt1234
           Subject Public Key Info:
               Public Key Algorithm: id-ecPublicKey
                   Public-Key: (256 bit)
                   pub:
                       04:83:5f:89:72:65:06:f0:d5:86:f8:db:51:1d:94:
                       5b:48:80:ec:b8:d1:5e:e9:70:78:93:94:4b:6c:a7:
                       e2:47:e7:53:fd:9d:82:c8:bf:8f:35:30:03:32:7e:
                       e5:1f:9b:03:33:30:bc:20:69:99:ff:f6:e6:2c:c8:
                       11:9c:40:5a:31
                   ASN1 OID: prime256v1
                   NIST CURVE: P-256
           Attributes:
           Requested Extensions:
               X509v3 Subject Alternative Name:
                   othername:<unsupported>
       Signature Algorithm: ecdsa-with-SHA256
            30:45:02:20:25:08:4b:f6:6f:aa:41:50:4b:cb:83:f6:ae:ca:
            0e:95:d9:41:a8:a2:50:f8:6e:63:00:da:95:01:99:2c:87:8b:
            02:21:00:82:c2:ff:4e:f2:2c:60:d2:f7:e5:2f:90:95:b8:38:
            1a:25:20:0f:dc:87:f9:0a:ef:57:7c:b0:0d:43:22:48:33

   Disassembley of pkcs7 response payload.
























van der Stok, et al.      Expires July 4, 2019                 [Page 38]

Internet-Draft                  EST-coaps                  December 2018


   Certificate:
       Data:
           Version: 3 (0x2)
           Serial Number:
               a7:e0:b2:60:f2:1a:85:09
       Signature Algorithm: ecdsa-with-SHA256
           Issuer: C=US, ST=CA, O=Example Inc, OU=certification,
                   CN=802.1AR CA
           Validity
               Not Before: Dec 30 13:54:31 2018 GMT
               Not After : Dec 31 23:59:59 9999 GMT
           Subject: C=US, ST=CA, L=Oak Park, O=example Inc, OU=IoT,
              CN=Client RA/serialNumber=Wt1234
           Subject Public Key Info:
               Public Key Algorithm: id-ecPublicKey
                   Public-Key: (256 bit)
                   pub:
                       04:83:5f:89:72:65:06:f0:d5:86:f8:db:51:1d:94:
                       5b:48:80:ec:b8:d1:5e:e9:70:78:93:94:4b:6c:a7:
                       e2:47:e7:53:fd:9d:82:c8:bf:8f:35:30:03:32:7e:
                       e5:1f:9b:03:33:30:bc:20:69:99:ff:f6:e6:2c:c8:
                       11:9c:40:5a:31
                   ASN1 OID: prime256v1
                   NIST CURVE: P-256
           X509v3 extensions:
               X509v3 Basic Constraints:
                   CA:FALSE
               X509v3 Subject Key Identifier:
   7B:86:C3:E2:1A:18:72:DD:48:66:6A:CF:A5:A1:28:AA:2C:
   2F:79:31
               X509v3 Authority Key Identifier:
                   keyid:
   53:AC:BB:3E:6E:BF:0B:5D:51:8E:E2:53:BC:36:F4:E1:6F:B9:58:9D

               X509v3 Key Usage: critical
                   Digital Signature, Key Encipherment
               X509v3 Subject Alternative Name:
                   othername:<unsupported>
       Signature Algorithm: ecdsa-with-SHA256
            30:46:02:21:00:85:90:4d:8f:3b:23:4b:57:6e:b5:3f:00:f1:
            31:00:86:1b:d8:3c:ba:b1:b3:4b:8a:3a:f7:aa:e4:ac:01:45:
            b2:02:21:00:92:b7:2e:62:06:8b:86:44:ff:90:48:0d:6a:6c:
            1b:bc:d4:59:26:e2:38:7f:df:77:32:ee:6d:da:9f:9e:b7:22








van der Stok, et al.      Expires July 4, 2019                 [Page 39]

Internet-Draft                  EST-coaps                  December 2018


B.3.  Serverkey generation disassembly

   The followng is the disassembly of the pkcs10 request payload.

   Certificate Request:
       Data:
           Version: 0 (0x0)
           Subject: C=US, ST=LA
           Subject Public Key Info:
               Public Key Algorithm: id-ecPublicKey
                   Public-Key: (256 bit)
                   pub:
                       04:83:5f:89:72:65:06:f0:d5:86:f8:db:51:1d:94:
                       5b:48:80:ec:b8:d1:5e:e9:70:78:93:94:4b:6c:a7:
                       e2:47:e7:53:fd:9d:82:c8:bf:8f:35:30:03:32:7e:
                       e5:1f:9b:03:33:30:bc:20:69:99:ff:f6:e6:2c:c8:
                       11:9c:40:5a:31
                   ASN1 OID: prime256v1
                   NIST CURVE: P-256
           Attributes:
               a0:00
       Signature Algorithm: ecdsa-with-SHA256
            30:46:02:21:00:bf:56:2c:f8:17:86:54:18:72:84:e2:d0:c3:
            a0:1b:76:07:48:d6:be:80:d5:4c:49:d3:98:6a:17:d0:19:7f:
            cc:02:21:00:e3:4e:6c:d8:c2:0e:3e:a5:38:8a:69:d5:2f:a8:
            14:79:5e:b8:ae:1b:ca:09:9b:3d:5a:e5:1a:77:e7:9b:d9:a5

   The following is the disassembly of the pkcs8 preamble content of the
   response payload.

   Private-Key: (256 bit)
   priv:
       00:fa:df:fb:ce:9c:4f:83:60:2b:04:e9:61:6a:d2:
       77:c3:e4:27:37:f6:29:6d:21:1e:93:0e:70:bc:87:
       f8:c3:af
   pub:
       04:83:5f:89:72:65:06:f0:d5:86:f8:db:51:1d:94:
       5b:48:80:ec:b8:d1:5e:e9:70:78:93:94:4b:6c:a7:
       e2:47:e7:53:fd:9d:82:c8:bf:8f:35:30:03:32:7e:
       e5:1f:9b:03:33:30:bc:20:69:99:ff:f6:e6:2c:c8:
       11:9c:40:5a:31
   ASN1 OID: prime256v1
   NIST CURVE: P-256

   The following is the disassembly of the pkcs7 content of the second
   part of the response payload.





van der Stok, et al.      Expires July 4, 2019                 [Page 40]

Internet-Draft                  EST-coaps                  December 2018


   Certificate:
       Data:
           Version: 3 (0x2)
           Serial Number:
               fb:dc:8b:de:af:bd:77:74
       Signature Algorithm: ecdsa-with-SHA256
           Issuer: C=US, ST=CA
           Validity
               Not Before: Dec 31 08:28:45 2018 GMT
               Not After : Dec 26 08:28:45 2038 GMT
           Subject: C=US, ST=CA
           Subject Public Key Info:
               Public Key Algorithm: id-ecPublicKey
                   Public-Key: (256 bit)
                   pub:
                       04:83:5f:89:72:65:06:f0:d5:86:f8:db:51:1d:94:
                       5b:48:80:ec:b8:d1:5e:e9:70:78:93:94:4b:6c:a7:
                       e2:47:e7:53:fd:9d:82:c8:bf:8f:35:30:03:32:7e:
                       e5:1f:9b:03:33:30:bc:20:69:99:ff:f6:e6:2c:c8:
                       11:9c:40:5a:31
                   ASN1 OID: prime256v1
                   NIST CURVE: P-256
           X509v3 extensions:
               X509v3 Subject Key Identifier:

   7B:86:C3:E2:1A:18:72:DD:48:66:6A:CF:A5:A1:28:AA:2C:2F:79:31
               X509v3 Authority Key Identifier:
                   keyid:
   7B:86:C3:E2:1A:18:72:DD:48:66:6A:CF:A5:A1:28:AA:2C:2F:79:31

               X509v3 Basic Constraints:
                   CA:TRUE
       Signature Algorithm: ecdsa-with-SHA256
            30:44:02:20:71:f1:dc:e2:04:9b:bf:bf:18:02:af:36:fe:6d:
            ce:ed:34:8d:a1:22:e2:5e:8c:79:e1:c6:a1:ea:17:3c:aa:aa:
            02:20:64:28:31:e7:86:c8:f5:9d:2b:9f:03:4b:fa:74:60:34:
            d5:1d:c5:39:3e:37:4f:f8:1e:2e:4f:cf:7b:ee:d7:35

   The private key in the response above is without CMS EnvelopedData
   and has no additional encryption beyond DTLS (Section 5.7).

Appendix C.  EST-coaps Block message examples

   Two examples are presented in this section:

   1.  a cacerts exchange shows the use of Block2 and the block headers





van der Stok, et al.      Expires July 4, 2019                 [Page 41]

Internet-Draft                  EST-coaps                  December 2018


   2.  an enroll exchange shows the Block1 and Block2 size negotiation
       for request and response payloads.

   The corresponding CoAP headers are only shown in Appendix C.1.
   Creating CoAP headers are assumed to be generally known.

C.1.  cacerts block example

   This section provides a detailed example of the messages using DTLS
   and BLOCK option Block2.  The minimum PMTU is 1280 bytes, which is
   the example value assumed for the DTLS datagram size.  The example
   block length is taken as 64 which gives an SZX value of 2.

   The following is an example of a cacerts exchange over DTLS.  The
   content length of the cacerts response in appendix A.1 of [RFC7030]]
   contains 1640 bytes.  The CoAP message adds around 10 bytes, the DTLS
   record 29 bytes.  To avoid IP fragmentation, the CoAP block option is
   used and an MTU of 127 is assumed to stay within one IEEE 802.15.4
   packet.  To stay below the MTU of 127, the payload is split in 25
   packets with a payload of 64 bytes each, followed by a last packet of
   40 bytes.  The client sends an IPv6 packet containing the UDP
   datagram with the DTLS record that encapsulates the CoAP request 40
   times.  The server returns an IPv6 packet containing the UDP datagram
   with the DTLS record that encapsulates the CoAP response.  The CoAP
   request-response exchange with block option is shown below.  Block
   option is shown in a decomposed way (block-option:NUM/M/size)
   indicating the kind of Block option (2 in this case) followed by a
   colon, and then the block number (NUM), the more bit (M = 0 in Block2
   response means it is last block), and block size with exponent
   (2**(SZX+4)) separated by slashes.  The Length 64 is used with SZX=2
   to avoid IP fragmentation.  The CoAP Request is sent with confirmable
   (CON) option and the content format of the response, even though not
   shown, is 281 (application/pkcs7-mime; smime-type=certs-only).

      GET /192.0.2.1:8085/est/crts   (2:0/0/64)    -->
                    <--   (2:0/1/64) 2.05 Content
      GET /192.0.2.1:8085/est/crts   (2:1/0/64)    -->
                    <--   (2:1/1/64) 2.05 Content
                            |
                            |
                            |
      GET /192.0.2.1:8085/est/crts    (2:25/0/64)  -->
                    <--   (2:25/0/64) 2.05 Content

   25 blocks have been sent with partially filled block NUM=25 as the
   last block.





van der Stok, et al.      Expires July 4, 2019                 [Page 42]

Internet-Draft                  EST-coaps                  December 2018


   For further detailing the CoAP headers, the first two blocks are
   written out below.  The header of the first GET request looks like


     Ver = 1
     T = 0 (CON)
     Code = 0x01 (0.1 GET)
     Token = 0x9a    (client generated)
     Options
      Option           [optional]
        Option Delta = 0x3  (option# 3 Uri-Host)
        Option Length = 0x9
        Option Value = 192.0.2.1
      Option           [optional]
        Option Delta = 0x4   (option# 3+4=7 Uri-Port)
        Option Length = 0x4
        Option Value = 8085
      Option
        Option Delta = 0x4    (option# 7+4=11 Uri-Path)
        Option Length = 0x5
        Option Value = "est"
      Option4
        Option Delta = 0x0    (option# 11+0=11 Uri-Path)
        Option Length = 0x6
        Option Value = "crts"
     Payload = [Empty]

   The header of the first response looks like

     Ver = 1
     T = 2 (ACK)
     Code = 0x45 (2.05 Content)
     Token = 0x9a     (copied from request by server)
     Options
       Option
         Option Delta = 0xC  (option# 12 Content-Format)
         Option Length = 0x2
         Option Value = 281
       Option
         Option Delta = 0xB  (option# 12+11=23 Block2)
         Option Length = 0x1
         Option Value = 0x0A (block#=0, M=1, SZX=2)
     Payload =
   2d2d2d2d2d424547494e20504b4353372d2d2d2d2d0a4d4949457741594a
   4b6f5a496876634e415163436f49494573544343424b3043415145784144
   414c42676b71686b

   The second Block2:



van der Stok, et al.      Expires July 4, 2019                 [Page 43]

Internet-Draft                  EST-coaps                  December 2018


     Ver = 1
     T = 2 (means ACK)
     Code = 0x45 (2.05 Content)
     Token = 0x9a     (copied from request by server)
     Options
       Option
         Option Delta = 0xC  (option# 12 Content-Format)
         Option Length = 0x2
         Option Value = 281
       Option
         Option Delta = 0xB  (option 12+11=23 Block2)
         Option Length = 0x1
         Option Value = 0x1A (block#=1, M=1, SZX=2)
     Payload =
   69473977304242774767676753544d4949430a516a43
   434165696741774942416749494430796b6e3052497a334177436759494b
   6f5a497a6a3045417749775a7a454c4d416b

   The 26th and final Block2:

     Ver = 1
     T = 2 (means ACK)
     Code = 0x45      (2.05 Content)
     Token = 0x9a     (copied from request by server)
     Options
       Option
         Option Delta = 0xC  (option# 12 Content-Format)
         Option Length = 0x2
         Option Value = 281
       Option
         Option Delta = 0xB  (option# 12+11=23 Block2 )
         Option Length = 0x2
         Option Value = 0x272 (block#=25, M=0, SZX=2)
     Payload =
   536e30766c4e65435934366473326145414d51413d0a2d2d2d2d
   2d454e4420504b4353372d2d2d2d2d0a

C.2.  enroll block example

   In this example the requested Block2 size of 256 bytes, required by
   the client, is transferred to the server in the very first request
   message.  The block size 256=(2**(SZX+4)) which gives SZX=4.  The
   notation for block numbering is the same as in Appendix C.1.  It is
   assumed that CSR takes N1+1 blocks and the cert response takes N2+1
   blocks.  The header fields and the payload are omitted for brevity.






van der Stok, et al.      Expires July 4, 2019                 [Page 44]

Internet-Draft                  EST-coaps                  December 2018


   POST [2001:db8::2:1]:61616/est/sen (CON)(1:0/1/256) {CSR req} -->
          <-- (ACK) (1:0/1/256) (2.31 Continue)
   POST [2001:db8::2:1]:61616/est/sen (CON)(1:1/1/256) {CSR req} -->
          <-- (ACK) (1:1/1/256) (2.31 Continue)
                         .
                         .
                         .
   POST [2001:db8::2:1]:61616/est/sen (CON)(1:N1/0/256){CSR req} -->
          <-- (ACK) (1:N1/0/256) (2:0/1/256) (2.04 Changed){Cert resp}
   POST [2001:db8::2:1]:61616/est/sen (CON)(2:1/0/256)           -->
          <-- (ACK) (2:1/1/256) (2.04 Changed) {Cert resp}
                         .
                         .
                         .
   POST [2001:db8::2:1]:61616/est/sen (CON)(2:N2/0/256)          -->
          <-- (ACK) (2:N2/0/256) (2.04 Changed) {Cert resp}


             Figure 5: EST-COAP enrolment with multiple blocks

   N1+1 blocks have been transferred from client to the server and N2+1
   blocks have been transferred from server to client.

Authors' Addresses

   Peter van der Stok
   Consultant

   Email: consultancy@vanderstok.org


   Panos Kampanakis
   Cisco Systems

   Email: pkampana@cisco.com


   Michael C. Richardson
   Sandelman Software Works

   Email: mcr+ietf@sandelman.ca
   URI:   http://www.sandelman.ca/









van der Stok, et al.      Expires July 4, 2019                 [Page 45]

Internet-Draft                  EST-coaps                  December 2018


   Shahid Raza
   RISE SICS
   Isafjordsgatan 22
   Kista, Stockholm  16440
   SE

   Email: shahid@sics.se












































van der Stok, et al.      Expires July 4, 2019                 [Page 46]
