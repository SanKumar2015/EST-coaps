<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'[
<!ENTITY RFC2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2460 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2460.xml">
<!ENTITY RFC4021 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4021.xml">
<!ENTITY RFC4492 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4492.xml">
<!ENTITY RFC4944 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4944.xml">
<!ENTITY RFC5246 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY RFC5272 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5272.xml">
<!ENTITY RFC5751 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5751.xml">
<!ENTITY RFC5958 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5958.xml">
<!ENTITY RFC5967 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5967.xml">
<!ENTITY RFC6090 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6090.xml">
<!ENTITY RFC6347 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6347.xml">
<!ENTITY RFC6690 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6690.xml">
<!ENTITY RFC7030 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7030.xml">
<!ENTITY RFC7230 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7230.xml">
<!ENTITY RFC7251 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7251.xml">
<!ENTITY RFC7252 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7252.xml">
<!ENTITY RFC7925 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7925.xml">
<!ENTITY RFC7959 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7959.xml">
<!ENTITY RFC7641 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7641.xml">
<!ENTITY RFC4919 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4919.xml">
<!ENTITY RFC5929 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5929.xml">
<!ENTITY RFC8075 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8075.xml">
<!ENTITY RFC7525 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7525.xml">
<!ENTITY I-D.ietf-anima-bootstrapping-keyinfra SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-anima-bootstrapping-keyinfra.xml">
<!ENTITY I-D.ietf-6tisch-dtsecurity-secure-join SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-6tisch-dtsecurity-secure-join.xml">
<!ENTITY I-D.ietf-6tisch-minimal-security SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-6tisch-minimal-security.xml">
<!ENTITY I-D.selander-ace-cose-ecdhe SYSTEM
"http://xml.resource.org/public/rfc/bibxml3/reference.I-D.selander-ace-cose-ecdhe.xml">
<!ENTITY I-D.ietf-core-object-security SYSTEM
"http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-core-object-security.xml">
<!ENTITY I-D.selander-ace-eals SYSTEM
"http://xml.resource.org/public/rfc/bibxml3/reference.I-D.selander-ace-eals.xml">
<!ENTITY I-D.ietf-anima-voucher SYSTEM
"http://xml.resource.org/public/rfc/bibxml3/reference.I-D.ietf-anima-voucher.xml">
<!ENTITY I-D.hartke-core-pending SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.hartke-core-pending.xml">
]>

<?rfc strict="no" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>

<rfc category="std" ipr="trust200902" docName="draft-vanderstok-ace-coap-est-02">
  <front>
    <title abbrev="EST-coaps">EST over secure CoAP (EST-coaps)</title>
    
    <author initials="S.S." surname="Kumar" fullname="Sandeep S. Kumar">
      <organization>Philips Lighting Research</organization>
      <address>
        <postal>
          <street>High Tech Campus 7</street>
          <city>Eindhoven</city>
          <region></region>
          <code>5656 AE</code>
          <country>NL</country>
        </postal>
        <email>ietf@sandeep.de</email>
      </address>
    </author>
    <author fullname="Peter van der Stok" initials="P." surname="van der Stok">
      <organization>Consultant</organization>
      <address>
        <email>consultancy@vanderstok.org</email>
      </address>
    </author>
    <author fullname="Panos Kampanakis" initials="P" surname="Kampanakis">
      <organization>Cisco Systems</organization>
      <address>
        <email>pkampana@cisco.com</email>
      </address>
    </author>
    <author fullname="Martin Furuhed" initials="M" surname="Furuhed">
        <organization>Nexus Group</organization>
        <address>
            <email>martin.furuhed@nexusgroup.com</email>
        </address>
    </author>
    <author fullname="Shahid Raza" initials="S" surname="Raza">
        <organization>RISE SICS </organization>
        <address>
            <postal>
                <street>Isafjordsgatan 22</street>
                <city>Kista</city>
                <region>Stockholm</region>
                <code>16440</code>
                <country>SE</country>
            </postal>
            <email>shahid@sics.se</email>
        </address>
    </author>
    
    <date/>
    <area>Security</area>
    <workgroup>ACE</workgroup>

    <abstract>
      <t>Low-resource devices in a Low-power and Lossy Network (LLN) can operate in a mesh network using the IPv6 over Low-power Wireless Personal Area Networks (6LoWPAN) and IEEE 802.15.4 link-layer standards. Provisioning these devices in a secure manner with keys (often called secure bootstrapping) used to encrypt and authenticate messages is the subject of Bootstrapping of Remote Secure Key Infrastructures (BRSKI) <xref target="I-D.ietf-anima-bootstrapping-keyinfra"/> and 6tisch Secure Join <xref target="I-D.ietf-6tisch-dtsecurity-secure-join"/>. Enrollment over Secure Transport (EST) <xref target="RFC7030"/>, based on TLS and HTTP, is used in BRSKI. Low-resource devices often use the lightweight Constrained Application Protocol (CoAP) <xref target="RFC7252"/> for message exchanges. This document defines how low-resource devices are expected to use EST over secure CoAP (EST-coaps) for secure bootstrapping and certificate enrollment. 6LoWPAN fragmentation management and minor extensions to CoAP are needed to enable EST-coaps.</t>
    </abstract>

  </front>


<middle>
  <section anchor="intro" title="Introduction">
    <t>IPv6 over Low-power Wireless Personal Area Networks (6LoWPANs) <xref target="RFC4944" /> on IEEE 802.15.4 <xref target="ieee802.15.4" /> wireless networks is becoming common in many industry application domains such as lighting controls. However, commissioning of such networks suffers from a lack of standardized secure bootstrapping mechanisms for these networks.</t>
    <t>Although IEEE 802.15.4 defines how security can be enabled between nodes within a single mesh network, it does not specify the provisioning and management of the keys. Therefore, securing a 6LoWPAN network with devices from multiple manufacturers with different provisioning techniques is often tedious and time consuming.</t>
    <t>Bootstrapping of Remote Secure Infrastructures (BRSKI) <xref target="I-D.ietf-anima-bootstrapping-keyinfra"/> addresses the issue of bootstrapping networked devices in the context of Autonomic Networking Integrated Model and Approach (ANIMA). <xref target="I-D.ietf-6tisch-minimal-security"/> and <xref target="I-D.ietf-6tisch-dtsecurity-secure-join"/> also address secure bootstrapping in the 6tisch context targeted to low-resource devices. BRSKI has not been developed specifically for low-resource devices in constrained networks. Constrained networks use DTLS <xref target="RFC6347"/>, CoAP <xref target="RFC7252"/>, and UDP instead of TLS <xref target="RFC5246"/>, HTTP <xref target="RFC7230"/> and TCP. BRSKI relies on Enrollment over Secure Transport (EST) <xref target="RFC7030"/> for the provisioning of the operational domain certificates.
</t><t> 
EST-coaps provides a subset of EST functionality and extends EST with BRSKI functions. EST-coaps replaces the invocations of TLS and HTTP by DTLS and CoAP invocations thus enabling EST and BRSKI for CoAP-based low-resource devices.</t>
   
   <t>Although EST-coaps paves the way for the utilization of EST for constrained devices on constrained networks, some devices will not have enough resources to handle the large payloads that come with EST-coaps. The specification of EST-coaps is intended to ensure that bootstrapping works for less constrained devices that choose to limit their communications stack to UDP/CoAP. It is up to the network designer to decide which devices execute the EST protocol and which not.</t>
    <t>EST-coaps is designed for use in professional control networks such as Building Control. The autonomic bootstrapping is interesting because it reduces the manual intervention during the commissioning of the network. Typing in passwords is contrary to this wish. Therefore, the HTTP Basic authentication of EST is not supported in EST-coaps. </t>
    <t>In the constrained devices context it is very unlikely that full PKI request messages will be used. For that reason, full PKI messages are not supported in EST-coaps.</t>
    <t>Because the relatively large EST messages cannot be readily transported over constrained (6LoWPAN, LLN) wireless networks, this document specifies the use of CoAP Block-Wise Transfer ("Block") <xref target="RFC7959"/> to fragment EST messages at the application layer.</t>
    <t>Support for Observe CoAP options <xref target="RFC7641"/> with BRSKI is not supported in the current BRSKI/EST message flows and is thus out-of-scope for this discussion. Observe options could be used by the server to notify clients about a change in the cacerts or csr attributes (resources) and might be an area of future work.</t>

<section anchor="terminology" title="Terminology">
<t>
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.
</t>
<t>Many of the concepts in this document are taken over from <xref target="RFC7030"/>. Consequently, much text is directly traceable to <xref target="RFC7030"/>. The same document structure is followed to point out the differences and commonalities between EST and EST-coaps.</t>
<t>
  The following terms are defined in the BRSKI protocol <xref target="I-D.ietf-anima-bootstrapping-keyinfra"/>: pledge, Join proxy, Join Registrar, and Manufacturer Authorized Signing Authorities (MASA).
</t>


</section>  <!-- Terminology -->


  </section>  <!-- Introduction -->



  <section anchor="scenario" title="EST operational differences">
    <t>Only the differences to EST with respect to operational scenarios are described in this section. EST-coaps server differs from EST server as follows:
      <list style="symbols">
        <t>Replacement of TLS by DTLS and HTTP by CoAP, resulting in:
        <list>
          <t>DTLS-secured CoAP sessions between EST-coaps client and EST-coaps server.</t>
        </list></t>
        <t>Only certificate-based client authentication is supported, which results in:
          <list>
            <t>The EST-coaps client does not support HTTP Basic authentication (as described in Section 3.2.3 of <xref target="RFC7030"/>).</t>
            <t>The EST-coaps client does not support authentication at the application layer (as described in Section 3.2.3 of <xref target="RFC7030"/>).</t>
          </list></t>
        <t>EST-coaps does not support full PKI request messages<xref target="RFC5272"/>. 
	<list>
          <t>Consequently, the fullcmc request of section 4.3 of <xref target="RFC7030"/> and response MUST NOT be supported by EST-coaps]. </t>
<t>[EDNOTE: Constrained endpoints that can't generate truly random numbers because of lack of an entropy source will need server-side key generation. Encrypting these keys is important. So using fullcmc messages are necessary over TLS. If fullcmc is something that will not work, then PKCS#12 encryption will work, but a passphrase needs to be established for those. ]</t>
	</list></t>
        <t>EST-coaps specifies the BRSKI extensions over CoAP as specified in section 5 of <xref target="I-D.ietf-anima-bootstrapping-keyinfra"/>.</t>
      </list></t>
  </section>  <!-- Operational scenario overview -->

<section anchor="profile7925" title="Conformance to RFC7925 profiles">
<t>
This section shows how EST-coaps fits into the profiles of low-resource devices as described in <xref target="RFC7925"/>. Within the bootstrap context a Public Key Infrastructure (PKI) is used, where the client is called "pledge", the Registration Authority (RA) is called Join Registrar, which acts at the front-end for the Certificate Authority (CA) and receives voucher feedback from as many Manufacturer Authorized Signing Authorities (MASA) as there are manufacturers. A Join-Proxy is placed between client and RA to receive join requests over a 1-hop unsecured channel and transmitted over the secure network to the EST-server. The EST-server of EST-coaps is placed between proxy and RA or is part of RA.</t>
<t>EST-coaps transports Public keys and certificates. Private keys can be transported as response to a request to a server-side key generation as described in section 4.4 of <xref target="RFC7030"/>. In the bootstrapping context, EST-coaps transport is limited to the EST certificate transport conformant to section 4.4 of <xref target="RFC7925"/>. For BRSKI, outside the profiles of <xref target="RFC7925"/>, EST-coaps transports vouchers, which are YANG files specified in <xref target="I-D.ietf-anima-voucher"/>.</t>

<t> The mandatory cipher suite for DTLS is TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 defined in <xref target="RFC7251"/> which is the mandatory-to-implement cipher suite in CoAP. Additionally the curve secp256r1 MUST be supported <xref target="RFC4492"/>; this curve is equivalent to the NIST P-256 curve. The hash algorithm is SHA-256. DTLS implementations MUST use the Supported Elliptic Curves and Supported Point Formats Extensions <xref target="RFC4492"/>; the uncompressed point format MUST be supported; <xref target="RFC6090"/> can be used as an implementation method.
</t>
<t>The EST-coaps client MUST be configured with an explicit TA database or at least an implicit TA database from its manufacturer. The authentication of the EST-coaps server by the EST-coaps client is based on Certificate authentication in the DTLS handshake.</t>
      <t>The authentication of the EST-coaps client is based on client certificate in the DTLS handshake. This can either be
        <list style="symbols">
            <t>DTLS with a previously issued client certificate (e.g., an existing certificate issued by the EST CA); this could be a common case for simple re-enrollment of clients; </t>
          <t>DTLS with a previously installed certificate (e.g., manufacturer-installed certificate or a certificate issued by some other party);</t>
        </list>
</t>
</section>  <!-- 7925 profile  -->

  <section anchor="design" title="Protocol Design and Layering">
    <t>EST-coaps uses CoAP to transfer EST messages, aided by Block-Wise Transfer <xref target="RFC7959"/> to transport CoAP messages in blocks thus avoiding (excessive) 6LoWPAN fragmentation of UDP datagrams. The use of "Block" for the transfer of larger EST messages is specified in <xref target="fragment"/>. The <xref target="fig-est-coaps-layers"/> below shows the layered EST-coaps architecture.</t>
<figure align="center" title="EST-coaps protocol layers" anchor="fig-est-coaps-layers"><artwork><![CDATA[
+------------------------------------------------+
|    EST request/response messages               |
+------------------------------------------------+
|    CoAP for message transfer and signaling     |
+------------------------------------------------+
|    DTLS for transport security                 |
+------------------------------------------------+
|    UDP for transport                           |
+------------------------------------------------+
]]></artwork></figure>
    <t>The EST-coaps protocol design follows closely the EST design, excluding some aspects that are not relevant for automatic bootstrapping of constrained devices within a professional context. The parts supported by EST-coaps are identified by their message types:
          <list style="symbols">
            <t>Simple enroll and reenroll, for CA to sign public client-identity key.</t>
            <t>CA certificate retrieval, needed when BRSKI is not applicable to establish the domain trust anchor. </t>
            <t>CSR Attributes request messages.</t>
            <t>Server-side key generation messages, to provide a private client-identity key when the client is too restricted.</t>
          </list>
</t>

<section anchor="discovery" title = "Discovery and URI">
<t>
EST-coaps is targeted to low-resource networks with small packets. Saving header space is important and the EST-coaps URI is shorter than the EST URI.
</t>
<t> The presence and location of (path to) the management data are discovered by sending a GET request to "/.well-known/core" including a resource type (RT) parameter with the value "ace.est" <xref target="RFC6690"/>. Upon success, the return payload will contain the root resource of the EST resources. It is up to the implementation to choose its root resource, throughout this document the example root resource /est is used. The example below shows the discovery of the presence and location of management data.
</t>
<figure><artwork align="left"><![CDATA[

  REQ: GET /.well-known/core?rt=ace.est

  RES: 2.05 Content 
</est>; rt="ace.est"
  
]]></artwork>
    </figure>


    <t>The EST-coaps server URIs differ from the EST URI by replacing the scheme https by coaps and by specifying shorter resource path names: </t>
<figure align="left"><artwork><![CDATA[
coaps://www.example.com/est/short-name 
]]></artwork></figure>
    <t>Figure 5 in section 3.2.2 of <xref target="RFC7030"/> enumerates the operations and corresponding paths which are supported by EST. <xref target="est-uri"/> provides the mapping from the EST and BRSKI URI path to the EST-coaps URI path.</t>

<texttable anchor="est-uri">
  <ttcol align="left">BRSKI</ttcol>
  <ttcol align="left">EST</ttcol>
  <ttcol align="left">EST-coaps</ttcol>
  
  <c> </c> <c> /cacerts  </c>           <c> /crts </c>
  <c> </c> <c> /simpleenroll </c>       <c> /sen </c>
  <c> </c> <c> /simplereenroll </c>     <c> /sren </c>
  <c> </c> <c> /csrattrs </c>           <c> /att </c>
  <c> </c> <c> /serverkeygen </c>       <c> /skg </c>
  <c> /requestvoucher </c> <c> </c>     <c> /rv </c>
  <c> /voucherstatus </c>  <c> </c>     <c> /vs </c>
  <c> /enrollstatus </c>   <c> </c>     <c> /es </c>
  
</texttable>

<t> /requestvoucher and /enrollstatus are needed between pledge and Registrar.</t>
  
<t> When discovering the root path for the EST resources, the server MAY return the full resource paths and the used content types. This is useful when multiple content type are specified for EST-coaps server. For example, the following more complete response is possible.

</t>

<figure><artwork align="left"><![CDATA[

  REQ: GET /.well-known/core?rt=ace.est

  RES: 2.05 Content 
</est>; rt="ace.est"
</est/crts>; rt="ace.est";ct=TBD1
</est/sen>; rt="ace.est";ct=TBD1 TBD4
</est/sren>; rt="ace.est";ct=TBD1 TBD4
</est/att>; rt="ace.est";ct=TBD4
</est/skg>; rt="ace.est";ct=TBD1 TBD4 TBD2
</est/rv>; rt="ace.est";ct=TBD?
</est/vs>; rt="ace.est";ct=TBD??
</est/es>; rt="ace.est";ct=TBD???
 
]]></artwork>
    </figure>
<t> The return of the content-types allows the client to choose the most appropriate one from multiple content types.
</t>

</section> <!-- discovery and URI -->

<section anchor="format" title ="Payload format">
    <t>The content-format (media type equivalent) of the CoAP message determines which EST message is transported in the CoAP payload. The media types specified in the HTTP Content-Type header(see section 3.2.2 of <xref target="RFC7030"/>) are in EST-coaps specified by the Content-Format Option (12) of CoAP. The combination of URI path-suffix and content-format used for coap MUST map to an allowed combination of path-suffix and media type as defined for EST. The required content-formats for these request and response messages are defined in <xref target="iana"/>. The CoAP response codes are defined in <xref target="error"/>.</t> 
    <t>EST-coaps is designed for use between low-resource devices using CoAP and hence does not need to send base64-encoded data. Simple binary is more efficient (30% less payload compared to base64) and well supported by CoAP. Therefore, the content formats specification in <xref target="iana"/> requires the use of binary for all EST-coaps CoAP payloads.</t>

</section> <!-- Payload format -->

    <section title="Message Bindings">
      <t>This section describes BRSKI to CoAP message mappings.</t>
      <t>All /crts, /sen, /sren, /att, /skg, /rv, /vs, and /es EST-coaps messages expect a response, so they are all CoAP CON messages.</t>
      
      <t>The Ver, TKL, Token, and Message ID values of the CoAP header are not influenced by EST.</t>

      <t>CoAP options are used to convey Uri-Host, Uri-Path, Uri-Port, Content-Format and more in CoAP. The CoAP Options are used to communicate the HTTP fields specified in the BRSKI REST messages. </t>

      <t>BRSKI URLs are HTTPS based (https:// ), in CoAP these will be assumed to be transformed to coaps (coaps://)</t>

      <t> <xref target="messagebindings"/> includes some practical examples of EST messages translated to CoAP. 
</t>
    </section> <!-- Message bindings -->

    <section anchor="error" title="CoAP response codes">
      <t>Section 5.9 of <xref target="RFC7252"/> specifies the mapping of HTTP response codes to CoAP response codes. Every time the HTTP response code 200 is specified in <xref target="RFC7030"/> in response to a GET request, in EST-coaps the equivalent CoAP response code 2.05 MUST be used. Response code HTTP 202 in EST is mapped to CoAP 2.06 as specified in
<xref target="I-D.hartke-core-pending"/>.
All other HTTP 2xx response codes are not used by EST. For the following HTTP 4xx error codes that may occur: 400, 401, 403, 404, 405, 406, 412, 413, 415 ; the equivalent CoAP response code for EST-coaps is 4.xx. For the HTTP 5xx error codes: 500, 501, 502, 503, 504 the equivalent CoAP response code is 5.xx.</t>
      
      <t><xref target="messagebindings"/> includes some practical examples of HTTP response codes from EST translated to CoAP.</t>
    </section> <!-- CoAP response codes -->

    <section anchor="fragment" title="Message fragmentation">
      <t>DTLS defines fragmentation only for the handshake part and not for secure data exchange (DTLS records). <xref target="RFC6347"/> states "Each DTLS record MUST fit within a single datagram". In order to avoid using IP fragmentation, which is not supported by 6LoWPAN, invokers of the DTLS record layer MUST size DTLS records so that they fit within any Path MTU estimates obtained from the record layer. In addition, invokers residing on a 6LoWPAN over IEEE 802.15.4 network SHOULD attempt to size CoAP messages such that each DTLS record will fit within one or two IEEE 802.15.4 frames.</t>
      <t>That is not always possible. Even though ECC certificates are small in size, they can vary greatly based on signature algorithms, key sizes, and OID fields used. For 256-bit curves, common ECDSA cert sizes are 500-1000 bytes which could fluctuate further based on the algorithms, OIDs, SANs and cert fields. For 384-bit curves, ECDSA certs increase in size and can sometimes reach 1.5KB. Additionally, there are times when the EST cacerts response from the server can include multiple certs that amount to large payloads. CoAP <xref target="RFC7252"/>'s section 4.6 describes the possible payload sizes: "if nothing is known about the size of the headers, good upper bounds are 1152 bytes for the message size and 1024 bytes for the payload size". Also "If IPv4 support on unusual networks is a consideration, implementations may want to limit themselves to more conservative IPv4 datagram sizes such as 576 bytes; per [RFC0791], the absolute minimum value of the IP MTU for IPv4 is as low as 68 bytes, which would leave only 40 bytes minus security overhead for a UDP payload". Thus, even with ECC certs, EST-coaps messages can still exceed sizes in MTU of 1280 for IPv6 or 60-80 bytes for 6LoWPAN <xref target="RFC4919"/> as explained in section 2 of <xref target="RFC7959"/>. EST-coaps needs to be able to fragment EST messages into multiple DTLS datagrams. Fine-grained fragmentation of EST messages is essential.</t>
      <t>To perform fragmentation in CoAP, <xref target="RFC7959"/> specifies the "Block1" option for fragmentation of the request payload and the "Block2" option for fragmentation of the return payload of a CoAP flow. </t>

      
      <t>The BLOCK draft defines SZX in the Block1 and Block2 option fields. These are used to convey the size of the blocks in the requests or responses. 
</t><t>
The CoAP client MAY specify the Block1 size and MAY also specify the Block2 size.  The CoAP server MAY specify the Block2 size, but not the Block1 size. As explained in Section 1 of <xref target="RFC7959"/>), blockwise transfers SHOULD be used in Confirmable CoAP messages to avoid the exacerbation of lost blocks.</t>
<t>
The Size1 response MAY be parsed by the client as a size indication of the Block2 resource in the server response or by the server as a request for a size estimate by the client. Similarly, Size2 option defined in BLOCK should be parsed by the server as an indication of the size of the resource carried in Block1 options and by the client as a maximum size expected in the 4.13 (Request Entity Too Large) response to a request.</t>
      
      <t>Examples of fragmented messages are shown in <xref target="blockexamples"/>.
</t>
    </section> <!-- Message fragmentation -->
</section> <!-- protocol design and layering -->


  <section anchor="transport" title = "Transport Protocol">
    
    <t>EST-coaps depends on a secure transport mechanism over UDP that can secure (confidentiality, authenticity) the CoAP messages exchanged. </t>
    
    <section anchor="DTLS" title = "DTLS">
      <t> DTLS is one such secure protocol. Within BRSKI and EST when "TLS" is referred to, it is understood that in EST-coaps, security is provided using DTLS instead. No other changes are necessary (all provisional modes etc are the same as for TLS).</t>
      <t>CoAP was designed to avoid fragmentation. DTLS is used to secure CoAP messages. However, fragmentation is still possible at the DTLS layer during the DTLS handshake when using ECC ciphersuites. If fragmentation is necessary, "DTLS provides a mechanism for fragmenting a handshake message over a number of records, each of which can be transmitted separately, thus avoiding IP fragmentation" <xref target="RFC6347"/>.</t>

<t>It is RECOMMENDED to keep DTLS channels open when multiple messages need to be passed. A good example is the channel binding necessary for the Proof of Possesion (PoP) described below.</t>
<t>CoAP and DTLS can provide proof of identity for EST-coaps clients and server with simple PKI messages conformant to section 3.1 of <xref target="RFC5272"/>. EST-coaps supports the certificate types and Trust Anchors (TA) that are specified for EST in section 3 of <xref target="RFC7030"/>.</t>
        <t>Channel-binding information for linking proof-of-identity with connection-based proof-of-possession is optional for EST-coaps. When proof-of-possession is desired, a set of actions are required regarding the use of tls-unique, described in section 3.5 in <xref target="RFC7030"/>. The tls-unique information translates to the contents of the first "Finished" message in the TLS handshake between server and client <xref target="RFC5929"/>. The client is then supposed to add this "Finished" message as a ChallengePassword in the attributes section of the PKCS#10 Request Info to prove that the client is indeed in control of the private key at the time of the TLS session when performing a /simpleenroll, for example. In the case of EST-coaps, the same operations can be performed during the DTLS handshake. In the event of handshake message fragmentation, the Hash of the handshake messages used in the MAC calculation of the Finished message 
<figure align="left"><artwork><![CDATA[
PRF(master_secret, finished_label, Hash(handshake_messages)) 
   [0..verify_data_length-1];
]]></artwork></figure> 
MUST be computed as if each handshake message had been sent as a single fragment <xref target="RFC6347"/>.</t>
<!-- EDNOTE: Account for DTLS 1.3-->

      <t>In a constrained CoAP environment, endpoints can't afford to establish a DTLS connection for every EST transaction. Authenticating and negotiating DTLS keys requires resources on low-end endpoints and consumes valuable bandwidth. The DTLS connection SHOULD remain open for persistent EST connections. For example, an EST cacerts request that is followed by a simpleenroll request can use the same authenticated DTLS connection. Given that after a successful enrollment, it is more likely that a new EST transaction will take place after a significant amount of time, the DTLS connections SHOULD only be kept alive for EST messages that are relatively close to each other.
</t>
    </section>

    <section title = "6tisch approach">
      <t>The 6tisch bootstrapping is targeted to the "imprinting" of the "pledge" with layer 2 keys. The content formats for the transport are being defined and may be expressed in a YANG module.</t>
<t>Instead of using transport security, the 6tisch approach relies on application security provided by OSCOAP <xref target=" I-D.ietf-core-object-security"/> and EDHOC <xref target="I-D.selander-ace-cose-ecdhe"/>. <xref target="I-D.selander-ace-eals"/> uses OSCAP to securely enroll certificates by using Certificate Management over CMS (CMC) (EST is profile of CMC). </t>
<t>
It is suggested that the EST-coaps communication between pledge and registrar, specified in this document, can be freely exchanged with the same communication specified in 
<xref target="I-D.ietf-6tisch-dtsecurity-secure-join"/> and <xref target="I-D.ietf-6tisch-minimal-security"/>.
</t>
<t> [EDNOTE: The evolution of this section depends on the directions taken by 6tisch and anima and the possible commonality that will be provided.] </t>

    </section> <!-- 6tisch approach -->

  </section> <!-- Transport Protocol -->


  <section title="Proxying">
    <t>In real-world deployments entities like the EST server, CA, or the BRSKI Registrar will not always reside within the COAP boundary. An EST server or CA can exist outside the constrained network in a non-constrained network that supports TLS/HTTP. In such environments EST-coaps is used by the pledge witin the COAP boundary and TLS is used to transport the EST/BRSKI messages outside the CoAP boundary. A proxy entity at the edge is required to operate between the COAP environment and the external HTTP network. The EST-coaps-to-HTTPS proxy SHOULD terminate EST-coaps downstream and initiate EST/BRSKI connectons over TLS upstream.
</t> 
<figure align="left" title="ESTcoaps-to-HTTPS proxy at the COAP boundary."><artwork><![CDATA[
                                        Constrained Network
                                    .---------------------------.
                                    |.-------------------------.|
                                    ||                .------. ||
                                    ||       COAPS .->|Pledge| ||
                                    ||             |  '------' || 
                                    ||             |           ||
                                    ||  COAPS .----'----.      ||
                                    ||     .->|Registrar|      ||
.-----------.  HTTP   .-----------------.  |  '---------'      ||
| EST/BRSKI |<------->|ESTcoaps-to-HTTPS|<--                   ||
|  Server   |over TLS |      Proxy      |<---.                 ||
'-----------'         '-----------------'    \   .----------.  ||
                                    || COAPS`--> |EST client|  ||
                                    ||           '----------'  ||
                                    |'-------------------------'|
                                    '---------------------------'
]]></artwork></figure>

    <t><xref target="est-uri"/> contains the mapping between the EST-coaps and EST/BRSKI URIs and proxy SHOULD adhere to. Section 7 of <xref target="RFC8075"/> defines the mapping between EST-coaps and HTTP response code, that determines how a proxy translates COAP response codes from/to HTTP status codes. 
</t>
<t>[EDNOTE: Some of the issues from RFC8075 will be clarified here like Content-Types mappings and Discovery.</t>
    <t>Due to fragmentation of large messages that could be broken into blocks, an EST-coaps-to-HTTP proxy SHOULD reassemble the BLOCKs before relaying the message upstream in the HTTP environment. </t>
<t>[EDNOTE: BLOCK fragments should be further explained here. Also reference RFC8075 ]</t>
    <t> [ EDNOTE: POP will be addressed here. ] </t>
    <t>A proxy SHOULD authenticate the client downstream and it should be authenticated by the EST or BRSKI server or CA upstream. A trust relationship needs to be pre-established between the proxy and the TCP entities (EST, BRSKI servers) in order to be able to proxy these connections on behalf of various clients.</t>
    <t> [TODO: Add more details about trust relations in this section. ] </t>
  </section>

  <section title="Parameters">
    <t>[EDNOTE: This section to be populated. It will address transmission parameters for BRSKI described in sections 4.7 and 4.8 of the CoAP draft. BRSKI does not impose any unique parameters that affect the CoAP parameters in Table 2 and 3 in the CoAP draft but the ones in CoAP could be affecting BRSKI. For example the processing delay of CAs could be less then 2s, but in this case they should send a CoAP ACK every 2s while processing.]</t>
  </section>

  <section anchor="iana" title="IANA Considerations">
    <t>Additions to the sub-registry "CoAP Content-Formats", within the "CoRE Parameters" registry are needed for the below media types. These can be registered either in the Expert Review range (0-255) or IETF Review range (256-9999).
    <list style="numbers">
      <t><list style ="symbols">
           <t>application/pkcs7-mime</t>
           <t>Type name: application</t>
           <t>Subtype name: pkcs7-mime</t>
           <t>smime-type: certs-only </t>
           <t> ID: TBD1 </t>
           <t>Required parameters: None</t>
           <t>Optional parameters: None </t>
           <t>Encoding considerations: binary</t>
           <t>Security considerations: As defined in this specification</t>
           <t>Published specification: <xref target="RFC5751"/> </t>
           <t>Applications that use this media type: ANIMA Bootstrap (BRSKI) and EST</t>
         </list></t>
      <t><list style ="symbols">
           <t>application/pkcs8</t>
           <t>Type name: application</t>
           <t>Subtype name: pkcs8</t>
           <t>ID: TBD2 </t>
           <t>Required parameters: None</t>
           <t>Optional parameters: None </t>
           <t>Encoding considerations: binary</t>
           <t>Security considerations: As defined in this specification</t>
           <t>Published specification: <xref target="RFC5958"/> </t>
           <t>Applications that use this media type: ANIMA Bootstrap (BRSKI) and EST</t>
        </list></t>
      <t><list style ="symbols">
           <t>application/csrattrs</t>
           <t>Type name: application</t>
           <t>Subtype name: csrattrs</t>
           <t> ID: TBD3 </t>
           <t>Required parameters: None</t>
           <t>Optional parameters: None </t>
           <t>Encoding considerations: binary</t>
           <t>Security considerations: As defined in this specification</t>
           <t>Published specification: <xref target="RFC7030"/> </t>
           <t>Applications that use this media type: ANIMA Bootstrap (BRSKI) and EST</t>
         </list></t>
      <t><list style ="symbols">
           <t>application/pkcs10</t>
           <t>Type name: application</t>
           <t>Subtype name: pkcs10</t>
           <t> ID: TBD4 </t>
           <t>Required parameters: None</t>
           <t>Optional parameters: None </t>
           <t>Encoding considerations: binary</t>
           <t>Security considerations: As defined in this specification</t>
           <t>Published specification: <xref target="RFC5967"/> </t>
           <t>Applications that use this media type: ANIMA bootstrap (BRSKI) and EST</t>
   <t><list style ="symbols">
           <t>application/pkcs12</t>
           <t>Type name: application</t>
           <t>Subtype name: pkcs12</t>
           <t> ID: TBD5 </t>
           <t>Required parameters: None</t>
           <t>Optional parameters: None </t>
           <t>Encoding considerations: binary</t>
           <t>Security considerations: As defined in this specification</t>
           <t>Published specification: IETF </t>
           <t>Applications that use this media type: ANIMA bootstrap (BRSKI) and EST</t>
         </list></t>
   <t><list style ="symbols">
           <t>application/auditnonce</t>
           <t>Type name: application</t>
           <t>Subtype name: auditnonce</t>
           <t> ID: TBD6 </t>
           <t>Required parameters: None</t>
           <t>Optional parameters: None </t>
           <t>Encoding considerations: binary</t>
           <t>Security considerations: As defined in this specification</t>
           <t>Published specification: BRSKI?? </t>
           <t>Applications that use this media type: ANIMA bootstrap (BRSKI)</t>
         </list></t>
    <t><list style ="symbols">
           <t>application/authorizationvoucher</t>
           <t>Type name: application</t>
           <t>Subtype name: authorizationvoucher</t>
           <t> ID: TBD7 </t>
           <t>Required parameters: None</t>
           <t>Optional parameters: None </t>
           <t>Encoding considerations: binary</t>
           <t>Security considerations: As defined in this specification</t>
           <t>Published specification: BRSKI?? </t>
           <t>Applications that use this media type: ANIMA bootstrap (BRSKI)</t>
         </list></t>
      </list></t>
    </list>
   </t>
   <t>Additions to the sub-registry "CoAP Resource Type", within the "CoRE Parameters" registry are needed for a new resource type. 
    <list style="symbols">
      <t>rt="ace.est" needs registration with IANA.</t>
    </list>
   </t>

  </section>  <!-- IANA consideration -->

<section anchor="sec" title="Security Considerations">
  <t>The security considerations of section 6 of <xref target="RFC7030"/> are only partially valid for the purposes of this document. As HTTP Basic Authentication is not supported, the considerations expressed for using passwords do not apply.</t>
<t>Given that the client has only limited resources and may not be able to generate sufficiently random keys to encrypt its identity, it is possible that the client uses server generated private/pubic keys to encrypt its certificate. The transport of these keys is inherently risky. A full probability analysis MUST be done to establish whether server side key generation enhances or decreases the probability of identity stealing.</t>
<t>[EDNote: how to protect the transport of these keys? fullcmc, PKCS#12 ?]</t>
  <t>When a client uses the Implicit TA database for certificate validation, te client cannot verify that the implicit data base can act as an RA. It is RECOMMENDED that such clients include "Linking Identity and POP Information" <xref target="DTLS"/> in requests (to prevent such requests from being forwarded to a real EST server by a man in the middle). It is RECOMMENDED that the Implicit Trust Anchor database used for EST server authentication be carefully managed to reduce the chance of a third-party CA with poor certification practices from being trusted. Disabling the Implicit Trust Anchor database after successfully receiving the Distribution of CA certificates response (Section 4.1.3 of <xref target="RFC7030"/>) limits any vulnerability to the first DTLS exchange.</t>
  <t>In accordance with <xref target="RFC7030"/>, TLS cipher suites that include "_EXPORT_" and "_DES_" in their names MUST NOT be used. More information about recomendations of TLS and DTLS are included in <xref target="RFC7525"/>.</t>
  <t>As described in CMC, Section 6.7 of <xref target="RFC5272"/>, "For keys that can be used as signature keys, signing the certification request with the private key serves as a POP on that key pair". The inclusion of tls-unique in the certification request links the proof-of-possession to the TLS proof-of-identity. This implies but does not prove that the authenticated client currently has access to the private key.</t>
  <t>Regarding the CSR attributes that the CA may list for inclusion in an enrollment request, an adversary could exclude attributes that a server may want, include attributes that a server may not want, and render meaningless other attributes that a server may want. The CA is expected to be able to enforce policies to recover from improper CSR requests. </t>
  <t>Interpreters of ASN.1 structures should be aware of the use of invalid ASN.1 length fields and should take appropriate measures to guard against buffer overflows, stack overruns in particular, and malicious content in general.</t>
  </section>  <!-- Security considerations  -->

  <section anchor="ack" title="Acknowledgements">
    <t>The authors are very grateful to Klaus Hartke for his detailed explanations on the use of Block with DTLS. The authors would like to thank Esko Dijk and Michael Verschoor for the valuable discussions that helped in shaping the solution. They would also like to thank Peter Panburana from Cisco for his feedback on technical details of the solution. Constructive comments were received from Eliot Lear and Julien Vermillard.</t>
  </section> <!-- Acknowledgements  -->

  <section anchor="changes" title="Change Log">
    <t> -02:
    <list style="empty">
      <t> binary instead of CBOR binary in mime types. </t>
      <t> supported content types are discoverable. </t>
      <t> DTLS POP text improved. </t>
      <t> First version of Security considerations section written. </t>
      <t> First version of Proxying section written. </t>
      <t> Various text improvements. </t>
    </list>
    </t>
    <t> -01:
         <list style="empty">
           <t>Merging of draft-vanderstok-ace-coap-est-00 and draft-pritikin-coap-bootstrap-01</t>
           <t> URI and discovery are modified </t>
           <t> More text about 6tisch bootstrap including EDHOC and OSCOAP </t>
           <t> mapping to DICE IoT profiles </t>
           <t> adapted to BRSKI progress </t>
         </list>
    </t>
  </section> <!-- Change Log -->
</middle>


<back>
  <references title="Normative References">
    &RFC2119;
    &RFC5272;
    &RFC5751;
    &RFC5967;
    &RFC6347;
    &RFC6690;  
    &RFC7030;
    &RFC7252;
    &RFC7959;
    &RFC8075;
    &I-D.ietf-anima-bootstrapping-keyinfra;
    &I-D.selander-ace-eals;
    &I-D.hartke-core-pending;

  </references>
  <references title="Informative References">
    &RFC4492;
    &RFC4944;
    &RFC5246;
    &RFC5958;
    &RFC6090;
    &RFC7230;
    &RFC7251;
    &RFC7641;
    &RFC7925;
    &RFC4919;
    &RFC5929;
    &RFC7525;
    &I-D.ietf-6tisch-dtsecurity-secure-join;
    &I-D.ietf-6tisch-minimal-security;
    &I-D.selander-ace-cose-ecdhe;
    &I-D.ietf-core-object-security; 
    &I-D.ietf-anima-voucher;
    <reference anchor="ieee802.15.4">
      <front>
        <title>IEEE Standard 802.15.4-2006</title>
        <author surname="Institute of Electrical and Electronics Engineers">
        </author>
        <date month="" year="2006" />
      </front>
    </reference>
  </references>

  <section anchor="messagebindings" title="EST messages to EST-coaps">
<t>
This section takes all examples from Appendix A of <xref target="RFC7030"/>, changes the payload from Base64 to binary and replaces the http headers by their CoAP equivalents. 
</t>
    <section title="cacerts">
      <t>In EST-coaps, a coaps cacerts message can be:
</t>
<figure align="left"><artwork><![CDATA[
GET coaps://[192.0.2.1:8085]/est/crts
]]></artwork></figure>
      
<t>The corresponding CoAP header fields are shown below. The use of block and DTLS are worked out in <xref target= "blockexamples"/>.

</t>
<figure><artwork>

<![CDATA[  Ver = 1
  T = 0 (CON)
  Code = 0x01 (0.01 is GET)
  Options
   Option1 (Uri-Host)
     Option Delta = 0x3  (option nr = 3)
     Option Length = 0x9
     Option Value = 192.0.2.1
   Option2 (Uri-Port)
     Option Delta = 0x4  (option nr = 4+3=7)
     Option Length = 0x4
     Option Value = 8085
   Option3 (Uri-Path)
     Option Delta = 0x4   (option nr = 7+4= 11)
     Option Length = 0x9
     Option Value = /est/crts
  Payload = [Empty]
]]></artwork></figure>

      <t>A 2.05 Content response with a cert in EST-coaps will then be:
</t>
<figure align="left"><artwork><![CDATA[
2.05 Content (Content-Format: application/pkcs7-mime)
   {payload}
]]></artwork></figure>
        <t>with CoAP fields </t>
          <figure><artwork>
<![CDATA[  Ver = 1
  T = 2 (ACK)
  Code = 0x45 (2.05 Content)
  Options
    Option1 (Content-Format)
      Option Delta = 0xC  (option nr = 12)
      Option Length = 0x2
      Option Value = TBD1 (defined in this document) 
                
  Payload =

30233906092a6206734107028c2a3023260201013100300b06092a6206734107018
c0c3020bb302063c20102020900a61e75193b7acc0d06092a620673410105050030
1b31193017060355040313106573744578616d706c654341204f774f301e170d313
3303530393033353333315a170d3134303530393033353333315a301b3119301706
0355040313106573744578616d706c654341204f774f302062300d06092a6206734
10101050003204f0030204a022041003a923a2968bae4aae136ca4e2512c5200680
358482ac39d6f640e4574e654ea35f48b1e054c5da3372872f7a1e429f4edf39584
32efb2106591d3eb783c1034709f251fc86566bda2d541c792389eac4ec9e181f4b
9f596e5ef2679cc321542b11337f90a44df3c85f1516561fa968a1914f265bc0b82
76ebe3106a790d97d34c8c37c74fe1c30b396424664ac426284a9f6022e02693843
6880adfcd95c98ca1dfc2e6d75319b85d0458de28a9d13fb16d620fff7541f6a25d
7daf004355020301000130b040300f0603551d130101f10530030101fc1d0603551
d0e04160414084d321ca0135e77217a486b686b334b00e0603551d0f0101f104030
20106300d06092a62067341010505000320410023703b965746a0c2c978666d787a
94f89b495a11f0d369b28936ec2475c0f0855c8e83f823f2b871a1d92282f323c45
904ba008579216cf5223b8b1bc425a0677262047f7700240631c17f3035d1c3780b
2385241cba1f4a6e98e6be6820306b3a786de5a557795d1893822347b5f825d34a7
ad2876f8feba4d525b31066f6505796f71530003431a3e6bbfe788b4565029a7e20
a51107677552586152d051e8eebf383e92288983421d5c5652a4870c3af74b9bdbe
d6b462e2263d30f6d3020c330206bc20102020101300d06092a6206734101050500
301b31193017060355040313106573744578616d706c654341204f774f301e170d3
133303530393033353333325a170d3134303530393033353333325a301b31193017
060355040313106573744578616d706c654341204e774f302062300d06092a62067
3410101050003204f0030204a02204100ef6b677a3247c1fc03d2b9baf113e5e7e1
1f49e0421120e6b8384160f2bf02630ef544d5fd0d5623b35713c79a7229283a790
8751a634aa420a3e2a4b1f10519d046f02f5a5dd6d760c2a842356e067b7bd94338
d1faa3b3ddd4813060a207b0a097067007e45b052b60fdbae4656e11562c4f5abb7
b0cf87a79d221f1127313c53371ce1245d63db45a1203a23340ba08042c768d03b8
076a028d3a51d87d2ef107bbd6f2305ce5e67668724002fb726df9c14476c37de0f
55033f192a5ad21f9a2a71c20301000134b050300e0603551d0f0101f104030204c
1d0603551d0e04160414112966e304761732fbfe6a2c823c301f0603551d2304183
0165084d321ca0135e77217a486b686b334b00d06092a6206734101050500032041
00b382ba3355a50e287bae15758b3beff63d34d3e357b90031495d018868e49589b
9faf46a4ad49b1d35b06ef380106677440934663c2cc111c183655f4dc41c0b3401
123d35387389db91f1e1b4131b16c291d35730b3f9b33c7475124851555fe5fc647
e8fd029605367c7e01281bf6617110021b0d10847dce0e9f0ca6c764b6334784055
172c3983d1e3a3a82301a54fcc9b0670c543a1c747164619101ff23b240b2a26394
c1f7d38d0e2f4747928ece5c34627a075a8b3122011e9d9158055c28f020c330206
bc20102020102300d06092a6206734101050500301b311930170603550403131065
73744578616d706c654341204e774e301e170d3133303530393033353333325a170
d3134303530393033353333325a301b31193017060355040313106573744578616d
706c654341204f774e302062300d06092a620673410101050003204f0030204a022
041003a923a2968bae4aae136ca4e2512c5200680358482ac39d6f640e4574e654e
a35f48b1e054c5da3372872f7a1e429f4edf3958432efb2106591d3eb783c103470
9f251fc86566bda2d541c792389eac4ec9e181f4b9f596e5ef2679cc321542b1133
7f90a44df3c85f1516561fa968a1914f265bc0b8276ebe3106a790d97d34c8c37c7
4fe1c30b396424664ac426284a9f6022e026938436880adfcd95c98ca1dfc2e6d75
319b85d0458de28a9d13fb16d620fff7541f6a25d7daf004355020301000134b050
300e0603551d0f0101f104030204c1d0603551d0e04160414084d321ca0135e7721
7a486b686b334b01f0603551d230418301653112966e304761732fbfe6a2c823c30
0d06092a6206734101050500032041002e106933a443070acf5594a3a584d08af7e
06c295059370a06639eff9bd418d13bc25a298223164a6cf1856b11a81617282e4a
410d82ef086839c6e235690322763065455351e4c596acc7c016b225dec094706c2
a10608f403b10821984c7c152343b18a768c2ad30238dc45dd653ee6092b0d5cd4c
2f7d236043269357f76d13f95fb5f00d0e19263c6833948e1ba612ce8197af650e2
5d882c12f4b6b9b67252c608ef064aca3f9bc867d71172349d510bb7651cd438837
73d927deb41c4673020bb302063c201020209009b9dda3324700d06092a62067341
01050500301b31193017060355040313106573744578616d706c654341204e774e3
01e170d3133303530393033353333325a170d3134303530393033353333325a301b
31193017060355040313106573744578616d706c654341204e774e302062300d060
92a620673410101050003204f0030204a02204100ef6b677a3247c1fc03d2b9baf1
13e5e7e11f49e0421120e6b8384160f2bf02630ef544d5fd0d5623b35713c79a722
9283a7908751a634aa420a3e2a4b1f10519d046f02f5a5dd6d760c2a842356e067b
7bd94338d1faa3b3ddd4813060a207b0a097067007e45b052b60fdbae4656e11562
c4f5abb7b0cf87a79d221f1127313c53371ce1245d63db45a1203a23340ba08042c
768d03b8076a028d3a51d87d2ef107bbd6f2305ce5e67668724002fb726df9c1447
6c37de0f55033f192a5ad21f9a2a71c20301000130b040300f0603551d130101f10
530030101fc1d0603551d0e04160414112966e304761732fbfe6a2c823c300e0603
551d0f0101f10403020106300d06092a620673410105050003204100423f06d4b76
0f4b42744a279035571696f272a0060f1325a40898509601ad14004f652db6312a1
475c4d7cd50f4b269035585d7856c5337765a66b38462d5bdaa7778aab24bbe2815
e37722cd10e7166c50e75ab75a1271324460211991e7445a2960f47351a1a629253
34119794b90e320bc730d6c1bee496e7ac125ce9a1eca595a3a4c54a865e6b623c9
247bfd0a7c19b56077392555c955e233642bec643ae37c166c5e221d797aea3748f
0391c8d692a5cf9bb71f6d0e37984d6fa673a30d0c006343116f58403100
]]></artwork></figure>
    </section>  <!-- cacerts -->

    <section title="csrattrs">
      <t>In the following valid /csrattrs exchange, the EST-coaps client authenticates itself  with a certificate issued by the connected CA.</t>
<t> The initial DTLS handhake is identical to the enrollment example. The CoAP GET request looks like: 
</t> 
<figure align="left"><artwork><![CDATA[
GET coaps://[192.0.2.1:8085]/est/att
]]></artwork></figure>
      <t>with CoAP header fields
</t>
      <figure><artwork>
<![CDATA[  Ver = 1
  T = 0 (CON)
  Code = 0x01 (0.01 is GET)
  Options
   Option1 (Uri-Host)
     Option Delta = 0x3  (option nr = 3)
     Option Length = 0x9
     Option Value = 192.0.2.1
   Option2 (Uri-Port)
     Option Delta = 0x4  (option nr = 4+3=7)
     Option Length = 0x4
     Option Value = 8085
   Option3 (Uri-Path)
     Option Delta = 0x4   (option nr = 7+4= 11)
     Option Length = 0x8
     Option Value = /est/att
  Payload = [Empty]
]]></artwork></figure>

      <t>A 2.05 Content response contains attributes which are relevant for the authenticated client. In this example, the EST-coaps server two attributes that the client can ignore when they are unknown to him.:
</t>
<figure align="left"><artwork><![CDATA[
2.05 Content (Content-Format: application/crsattrs)
   {payload}
]]></artwork></figure>
        <t>with CoAP fields 
</t>
          <figure><artwork>
<![CDATA[  Ver = 1
  T = 2 (ACK)
  Code = 0x45 (2.05 Content)
  Options
    Option1 (Content-Format)
      Option Delta = 0xC  (option nr = 12)
      Option Length = 0x2
      Option Value = TBD3 (defined in this document)
                
  Payload =
307c06072b060101010116302206038dc1311b131950617273652053455420617
320322e3939392e31206461746106092a620673410907302c06038dc231250603
8dc306038dc4131950617273652053455420617320322e3939392e32206461746
106092b240303020801010b06096062016503040202
]]></artwork></figure>
    </section>  <!-- csrattrs -->

    <section title="enroll / reenroll">

      <t>[EDNOTE: We might need a new Option for the Retry-After response message. We might need a new Option for the WWW-Authenticate
        response.]</t>

      <t>During the Enroll/Reenroll exchange, the EST-coaps client uses a CSR (PKCS#10) request in the POST request payload.</t>
<figure align="left"><artwork><![CDATA[
POST coaps://[192.0.2.1:8085]/est/sen
(Content-Format: application/pkcs10)
]]></artwork></figure>

      <t>with CoAP header fields</t>
      <figure><artwork>
<![CDATA[  Ver = 1
  T = 0 (CON)
  Code = 0x02 (0.02 is POST)
  Options
   Option1 (Uri-Host)
     Option Delta = 0x3  (option nr = 3)
     Option Length = 0x9
     Option Value = 192.0.2.1
   Option2 (Uri-Port)
     Option Delta = 0x4  (option nr = 4+3=7)
     Option Length = 0x4
     Option Value = 8085
   Option3 (Uri-Path)
     Option Delta = 0x4   (option nr = 7+4= 11)
     Option Length = 0x8
     Option Value = /est/sen
   Option4 (Content-Format)
      Option Delta = 0x1  (option nr = 11+1 = 12)
      Option Length = 0x2
      Option Value = TBD5 (defined in this document)

  Payload =
[EDNOTE: If POP is used, make sure tls-unique in the CSR is a
 valid HMAC output. ] 
30208530206d020100301f311d301b0603550403131464656d6f7374657034203
1333638313431333532302062300d06092a620673410101050003204f0030204a
022041005d9f4dffd3c5949f646a9584367778560950b355c35b8e34726dd3764
54231734795b4c09b9c6d75d408311307a81f7adef7f5d241f7d5be85620c5d44
38bbb4242cf215c167f2ccf36c364ea2618a62f0536576369d6304e6a96877224
7d86824f079faac7a6f694cfda5b84c42087dc062d462190c525813f210a036a7
37b4f30d8891f4b75559fb72752453146332d51c937557716ccec624f5125c3a4
447ad3115020048113fef54ad554ee88af09a2583aac9024075113db4990b1786
b871691e0f02030100018701f06092a620673410907311213102b72724369722f
372b45597535305434300d06092a620673410105050003204100441b40177a3a6
5501487735a8ad5d3827a4eaa867013920e2afcda87aa81733c7c0353be47e1bf
a7cda5176e7ccc6be22ae03498588d5f2de3b143f2b1a6175ec544e8e7625af6b
836fd4416894c2e55ea99c6606f69075d6d53475d410729aa6d806afbb9986caf
7b844b5b3e4545f19071865ada007060cad6db26a592d4a7bda7d586b68110962
17071103407553155cddc75481e272b5ed553a8593fb7e25100a6f7605085dab4
fc7e0731f0e7fe305703791362d5157e92e6b5c2e3edbcadb40

]]></artwork></figure>

      <t> After verification of the certificate by the server, a 2.05 Content response with the issued certificate will be:
</t>
<figure align="left"><artwork><![CDATA[
2.05 Content (Content-Format: application/pkcs7-mime)
   {payload}
]]></artwork></figure>
        <t>with CoAP fields </t>
          <figure><artwork>
<![CDATA[  Ver = 1
  T = 2 (ACK)
  Code = 0x45 (2.05 Content)
  Options
    Option1 (Content-Format)
      Option Delta = 0xC  (option nr = 12)
      Option Length = 0x2
      Option Value = TBD1 (defined in this document)
                
  Payload =
3020f806092a62067341070283293020e50201013100300b06092a62067341070
1830b3020c730206fc20102020115300d06092a6206734101050500301b311930
17060355040313106573744578616d706c654341204e774e301e170d313330353
0393233313535335a170d3134303530393233313535335a301f311d301b060355
0403131464656d6f73746570342031333638313431333532302062300d06092a6
20673410101050003204f0030204a022041005d9f4dffd3c5949f646a95843677
78560950b355c35b8e34726dd376454231734795b4c09b9c6d75d408311307a81
f7adef7f5d241f7d5be85620c5d4438bbb4242cf215c167f2ccf36c364ea2618a
62f0536576369d6304e6a968772247d86824f079faac7a6f694cfda5b84c42087
dc062d462190c525813f210a036a737b4f30d8891f4b75559fb72752453146332
d51c937557716ccec624f5125c3a4447ad3115020048113fef54ad554ee88af09
a2583aac9024075113db4990b1786b871691e0f020301000134b050300e060355
1d0f0101f104030204c1d0603551d0e04160414e81d0788aa2710304c5ecd4d1e
065701f0603551d230418301653112966e304761732fbfe6a2c823c300d06092a
6206734101050500032041002910d86f2ffeeb914c046816871de601567d291b4
3fabee0f0e8ff81cea27302a7133e20e9d04029866a8963c7d14e26fbe8a0ab1b
77fbb1214bbcdc906fbc381137ec1de685f79406c3e416b8d82f97174bc691637
5a4e1c4bf744c7572b4b2c6bade9fb35da786392ee0d95e3970542565f3886ad6
7746d1b12484bb02616e63302dc371dc6006e431fb7c457598dd204b367b0b3d3
258760a303f1102db26327f929b7c5a60173e1799491b69150248756026b80553
171e4733ad3d13c0103100
]]></artwork></figure>
    </section>  <!-- enroll / reenroll -->

<section title="serverkeygen">
      <t>During this valid /serverkeygen exchange, the EST-coaps client authenticates itself using the certificate provided by the connected CA.</t>
<t> The initial DTLS handhake is identical to the enrollment example. The CoAP GET request looks like:
</t> 
<figure align="left"><artwork><![CDATA[
POST coaps://[192.0.2.1:8085]/est/skg
]]></artwork></figure>
      <t>with CoAP header fields
</t>
      <figure><artwork>
<![CDATA[  Ver = 1
  T = 0 (CON)
  Code = 0x02 (0.02 is POST)
  Options
   Option1 (Uri-Host)
     Option Delta = 0x3  (option nr = 3)
     Option Length = 0x9
     Option Value = 192.0.2.1
   Option2 (Uri-Port)
     Option Delta = 0x4  (option nr = 4+3=7)
     Option Length = 0x4
     Option Value = 8085
   Option3 (Uri-Path)
     Option Delta = 0x4   (option nr = 7+4= 11)
     Option Length = 0x8
     Option Value = /est/skg
   Option4 (Content-Format) 
[EDNOTE: the client incudes a CSR with a public key  that the
 server should ignore, so we need a content-format here. ]
      Option Delta = 0x1  (option nr = 12)
      Option Length = 0x2
      Option Value = TBD5 (defined in this document)
  Payload =
[EDNote: If POP is used, make sure tls-unique in the CSR
 is a valid HMAC output. ]
302081302069020100305b313e303c060355040313357365727665724b6579476
56e2072657120627920636c69656e7420696e2064656d6f207374657020313220
3133363831343139353531193017060355040513105049443a576964676574205
34e3a3130302062300d06092a620673410101050003204f0030204a02204100f4
dfa6c03f7f2766b23776c333d2c0f9d1a7a6ee36d01499bbe6f075d1e38a57e98
ecc197f51b75228454b7f19652332de5e52e4a974c6ae34e1df80b33f15f47d3b
cbf76116bb0e4d3e04a9651218a476a13fc186c2a255e4065ff7c271cff104e47
31fad53c22b21a1e5138bf9ad0187314ac39445949a48805392390e78c7659621
6d3e61327a534f5ea7721d2b1343c7362b37da502717cfc2475653c7a3860c5f4
0612a5db6d33794d755264b6327e3a3263b149628585b85e57e42f6b3277591b0
2030100018701f06092a6206734109073112131064467341586d4a6e6a6f6b427
4447672300d06092a620673410105050003204100472d11007e5a2b2c2023d47a
6d71d046c307701d8ebc9e47272713378390b4ee321462a3dbe54579f5a514f6f
4050af497f428189b63655d03a194ef729f101743e5d03fbc6ae1e84486d1300a
f9288724381909188c851fa9a5059802eb64449f2a3c9e441353d136768da27ff
4f277651d676a6a7e51931b08f56135a2230891fd184960e1313e7a1a9139ed19
28196867079a456cd2266cb754a45151b7b1b939e381be333fea61580fe5d25bf
4823dbd2d6a98445b46305c10637e202856611
]]></artwork></figure>
<t> Without the DecryptKeyIdentifier atttribute, the response has no additional encryption beyond the DTLS one. The EST-coaps server response is:
</t>
<figure align="left"><artwork><![CDATA[
2.05 Content (Content-Format: application/pkcs8)
   {payload}
]]></artwork></figure>
        <t>The response contains first a preamble that can be ignored. The EST-coaps server can use the preamble to include additional explanations, like ownership or support information </t>
          <figure><artwork>
<![CDATA[  Ver = 1
  T = 2 (ACK)
  Code = 0x45 (2.05 Content)
  Options
    Option1 (Content-Format)
      Option Delta = 0xC  (option nr = 12)
      Option Length = 0x2
      Option Value = TBD2 (defined in this document)
                
  Payload =
30213e020100300d06092a6206734101010500042128302124020100022041003
c0bc2748f2003e3e8ea15f746f2a71e83f585412b92cf6f8e64de02e056153274
dd01c95dd9cff3112aa141774ab655c3d56359c3b3df055294692ed848e7e30a1
1bf14e47e0693d93017022b4cdb3e6d40325356152b213c8b535851e681a7074c
0c6d2b60e7c32fc0336b28e743eba4e5921074d47195d3c05e43c527526e692d5
45e562578d2d4b5f2191bff89d3eef0222764a2674637a1f99257216647df6704
efec5adbf54dab24231844eb595875795000e673dd6862310a146ad7e31083010
001022041004e6b3f78b7791d6377f33117c17844531c81111fb8000282816264
915565bc7c3f3f643b537a2c69140a31c22550fa97e5132c61b74166b68626704
260620333050f510096b6570f5880e7e1c15dc0ca6ce2b5f187e2325da14ab705
ad004717f3b2f779127b5c535e0cee6a343b502722f2397a26126e0af606b5aa7
f96313511c0b7eb26354f91b82269de62757e3def807a6afdf83ddcbb0614bb7c
542e6975d6456554e7bd9988fbd1930cd44d0e01ee9182ca54539418653150254
1ad1a2a11e5021040bfce554b642c29131e7d65455e83c5406d76771912f758f5
ee3ee36af386f38ffa313c0f661880c5a2b0970485d36f528e7f77a2e55b4ad76
1242d1c2f75939c8061217d31491d305d3e07d6161c43e26f7de4477b1811de92
33dc75b426302104015bf48ac376f52887813461fc54635517bcb67293837053e
8ce1a33da7a35565a75a370dc14555b5316cb55742380350774d769d151ff0456
0214389a232a2258326163167504cfce44cd316f63bb8a52da53a4cb74fd87194
c0844881f791f23b0813ea0921325edd14459d41c8a1593f04316388e40b35fef
7d2a195a5930fa54774427ac821eee2c62790d2c17bd192af794c611011506557
83d4efe22185cbd83368786f2b1e68a5a27067e321066f0217b4b6d7971a3c21a
241366b7907187583b511102103369047e5cce0b65012200df5ec697b5827575c
db6821ff299d6a69574b31ddf0fbe9245ea2f74396c24b3a7565067e41366423b
5bdd2b2a78194094dbe333f493d159b8e07722f2280d48388db7f1c9f0633bb0e
173de2c3aa1f200af535411c7090210401421e2ea217e37312dcc606f453a6634
f3df4dc31a9e910614406412e70eec9247f10672a500947a64356c015a845a7d1
50e2e3911a2b3b61070a73247166da10bb45474cc97d1ec2bc392524307f35118
f917438f607f18181684376e13a39e07
--estServerExampleBoundary
Ver = 1
  T = 2 (ACK)
  Code = 0x45 (2.05 Content)
  Options
    Option1 (Content-Format)
      Option Delta = 0xC  (option nr = 12)
      Option Length = 0x2
      Option Value = TBD1 (defined in this document) 
  Payload=
3020c506092a62067341070283363020f20201013100300b06092a62067341070
183183020d430207cc20102020116300d06092a6206734101050500301b311930
17060355040313106573744578616d706c654341204e774e301e170d313330353
0393233323535365a170d3134303530393233323535365a302c312a3028060355
0403132173657276657273696465206b65792067656e657261746564207265737
06f6e7365302062300d06092a620673410101050003204f0030204a022041003c
0bc2748f2003e3e8ea15f746f2a71e83f585412b92cf6f8e64de02e056153274d
d01c95dd9cff3112aa141774ab655c3d56359c3b3df055294692ed848e7e30a11
bf14e47e0693d93017022b4cdb3e6d40325356152b213c8b535851e681a7074c0
c6d2b60e7c32fc0336b28e743eba4e5921074d47195d3c05e43c527526e692d54
5e562578d2d4b5f2191bff89d3eef0222764a2674637a1f99257216647df6704e
fec5adbf54dab24231844eb595875795000e673dd6862310a146ad7e310830100
0134b050300e0603551d0f0101f104030204c1d0603551d0e04160414764b1bd5
e69935626e476b195a1a8c1f0603551d230418301653112966e304761732fbfe6
a2c823c300d06092a620673410105050003204100474e5100a9cdaaa813b30f48
40340fb17e7d6d6063064a5a7f2162301c464b5a8176623dfb1a4a484e618de1c
3c3c5927cf590f4541233ff3c251e772a9a3f2c5fc6e5ef2fe155e5e385deb846
b36eb4c3c7ef713f2d137ae8be4c022715fd033a818d55250f4e6077718180755
a4fa677130da60818175ca4ab2af1d15563624c51e13dfdcf381881b72327e2f4
9b7467e631a27b5b5c7d542bd2edaf78c0ac294f3972278996bdf673a334ff74c
84aa7d65726310252f6a4f41281ec10ca2243864e3c5743103100
]]></artwork></figure>
<t>This epilogue can also be ignored</t>


    </section>  <!-- serverkeygen -->



    <section title="enrollstatus">
      <t>[EDNOTE: Include CoAP message examples. ]</t>
    </section>  <!-- enrollstatus -->

    <section title="voucher_status">
      <t>[EDNOTE: Include CoAP message examples. ]</t>
    </section>  <!-- voucher_status -->

    <section title="requestvoucher">
      <t>[EDNOTE: Include CoAP message examples. ]</t>
    </section>  <!-- requestvoucher -->


  </section>  <!-- EST messages to EST-coaps -->

  <section anchor="blockexamples" title="EST-coaps Block message examples">
    <t>This section provides a detailed example of the messages using DTLS and BLOCK option Block2. The minimum PMTU is 1280 bytes, which is the example value assumed for the DTLS datagram size. The example block length is taken as 64 which gives an SZX value of 2.</t>
    <t>The following is an example of a valid /cacerts exchange over DTLS. The content length of the cacerts response in appendix A.1 of <xref target="RFC7030"/> is 4246 bytes using base64. This leads to a length of 2509 bytes in binary. The CoAP message adds around 10 bytes, the DTLS record 29 bytes. To avoid IP fragmentation, the CoAP block option is used and an MTU of 127 is assumed to stay within one IEEE 802.15.4 packet. To stay below the MTU of 127, the payload is split in 39 packets with a payload of 64 bytes each, followed by a packet of 13 bytes. The client sends an IPv6 packet containing the UDP datagram with the DTLS record that encapsulates the CoAP Request 40 times. The server returns an IPv6 packet containing the UDP datagram with the DTLS record that encapsulates the CoAP response. The CoAP request-response exchange with block option is shown below. Block option is shown in a decomposed way indicating the kind of Block option (2 in this case because used in the response) followed by a colon, and then the block number (NUM), the more bit (M = 0 means last block), and block size exponent (2**(SZX+4)) separated by slashes. The Length 64 is used with SZX= 2 to avoid IP fragmentation. The CoAP Request is sent with confirmable (CON) option and the content format of the Response is /application/cacerts.
</t>
    <figure align="left"><artwork><![CDATA[
GET [192.0.2.1:8085]/est/crts     -->
              <--   (2:0/1/39) 2.05 Content
    GET URI (2:1/1/39)                           -->
              <--   (2:1/1/39) 2.05 Content
                      |
                      |
                      |
     GET URI (2:65/1/39)                         -->
              <--   (2:65/0/39) 2.05 Content
]]></artwork></figure>
<t>
For further detailing the CoAP headers of the first two blocks are written out.
</t><t>
The header of the first GET looks like:
</t>
<figure><artwork>
<![CDATA[  
  Ver = 1
  T = 0 (CON)
  Code = 0x01 (0.1 GET) 
  Options
   Option1 (Uri-Host)
     Option Delta = 0x3  (option nr = 3)
     Option Length = 0x9
     Option Value = 192.0.2.1
   Option2 (Uri-Port)
     Option Delta = 0x4   (option nr = 3+4=7)
     Option Length = 0x4
     Option Value = 8085
   Option3 (Uri-Path)
     Option Delta = 0x4    (option nr = 7+4=11)
     Option Length = 0x9
     Option Value = /est/crts
  Payload = [Empty]
]]></artwork>
          </figure>

    <t>The header of the first response looks like:</t>
    <figure><artwork>
<![CDATA[  Ver = 1
  T = 2 (ACK)
  Code = 0x45 (2.05 Content.) 
  Options
    Option1 (Content-Format)
      Option Delta = 0xC  (option 12)
      Option Length = 0x2
      Option Value = TBD1                  
    Option2 (Block2)
      Option Delta = 0xB  (option 23 = 12 + 11)
      Option Length = 0x1
      Option Value = 0x0A (block number = 0, M=1, SZX=2)
  Payload = 
30233906092a6206734107028c2a3023260201013100300b06092a6206734107018
c0c3020bb302063c20102020900a61e75193b7acc0d06092a6206734101
]]></artwork>
          </figure>

    <t>The second Block2:
</t>
    <figure><artwork>
<![CDATA[  Ver = 1
  T = 2 (means ACK)
  Code = 0x45 (2.05 Content.)
  Options
    Option1 (Content-Format)
      Option Delta = 0xC   (option 12)
      Option Length = 0x2 
      Option Value = TBD1
    Option2 (Block2)
      Option Delta = 0xB  (option 23 = 12 + 11)
      Option Length = 0x1
      Option Value = 0x1A (block number = 1, M=1, SZX=2)
  Payload = 
05050030
1b31193017060355040313106573744578616d706c654341204f774f301e170d313
3303530393033353333315a170d3134303530393033353333315a
]]></artwork></figure>

    <t>The 40th and final Block2:

</t>
    <figure><artwork>
<![CDATA[  Ver = 1
  T = 2 (means ACK)
  Code = 0x21
  Options
    Option1 (Content-Format)
      Option Delta = 0xC   (option 12)
      Option Length = 0x2
      Option Value = TBD1 
    Option2 (Block2)
      Option Delta = 0xB  (option 23 = 12 + 11)
      Option Length = 0x2
      Option Value = 0x272 (block number = 39, M=0, SZX=2)
  Payload = 73a30d0c006343116f58403100
]]></artwork></figure>
     
  </section> <!-- EST-coaps Block message examples -->
</back>

</rfc>
